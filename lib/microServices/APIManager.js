"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log4js = require("koa-log4");
const _ = require("lodash");
require("reflect-metadata");
const request_1 = require("request");
const util_1 = require("util");
const CAHttpsContext_1 = require("../models/CAHttpsContext");
const _log = log4js.getLogger('APIManger');
class APIManger {
    constructor() {
        this.agentOptions = undefined;
        const caData = CAHttpsContext_1.default.getInstance().getCA();
        if (!_.isUndefined(caData)) {
            this.agentOptions = _.isUndefined(caData.cadata) ? undefined : _.omitBy(caData.cadata, _.isUndefined);
            this.auth = _.isUndefined(caData.authData) ? undefined : _.omitBy(caData.authData, _.isUndefined);
        }
        const [getPm, postPm, patchPm, deletePm, putPm] = [request_1.get, request_1.post, request_1.patch, request_1.del, request_1.put].map(util_1.promisify);
        this.get = getPm;
        this.post = postPm;
        this.patch = patchPm;
        this.del = deletePm;
        this.put = putPm;
    }
    /**
     * httpGet
     */
    async httpGet(url, params, authData) {
        const baseData = {
            url: 'http://' + url,
            auth: _.isUndefined(authData) ? this.auth : authData
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.get(reqData);
    }
    /**
     * httpsGet
     */
    async httpsGet(url, params, cadata) {
        const baseData = {
            url: 'http://' + url,
            agentOptions: _.isUndefined(cadata) ? this.agentOptions : _.omitBy(cadata, _.isUndefined)
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.get(reqData);
    }
    /**
     * httpPost
     */
    async httpPost(url, requestBody, params, authData) {
        const baseData = {
            url: 'http://' + url,
            auth: _.isUndefined(authData) ? this.auth : authData,
            json: true,
            body: JSON.stringify(requestBody)
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.post(reqData);
    }
    /**
     * httpsPost
     */
    async httpsPost(url, requestBody, params, cadata) {
        const baseData = {
            url: 'http://' + url,
            agentOptions: _.isUndefined(cadata) ? this.agentOptions : _.omitBy(cadata, _.isUndefined),
            json: true, body: JSON.stringify(requestBody)
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.post(reqData);
    }
    /**
     * httpPostFormData
     */
    async httpPostFormData(url, formData, params, authData) {
        const baseData = {
            url: 'http://' + url,
            auth: _.isUndefined(authData) ? this.auth : authData,
            formData
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.post(reqData);
    }
    /**
     * httpsPostFormData
     */
    async httpsPostFormData(url, formData, params, cadata) {
        const baseData = {
            url: 'http://' + url,
            agentOptions: _.isUndefined(cadata) ? this.agentOptions : _.omitBy(cadata, _.isUndefined),
            formData
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.post(reqData);
    }
    /**
     * httpPut
     */
    async httpPut(url, requestBody, params, authData) {
        const baseData = {
            url: 'http://' + url,
            auth: _.isUndefined(authData) ? this.auth : authData,
            json: true,
            body: JSON.stringify(requestBody)
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.put(reqData);
    }
    /**
     * httpsPut
     */
    async httpsPut(url, requestBody, params, cadata) {
        const baseData = {
            url: 'http://' + url,
            agentOptions: _.isUndefined(cadata) ? this.agentOptions : _.omitBy(cadata, _.isUndefined),
            json: true, body: JSON.stringify(requestBody)
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.put(reqData);
    }
    /**
     * httpPutFormData
     */
    async httpPutFormData(url, formData, params, authData) {
        const baseData = {
            url: 'http://' + url,
            auth: _.isUndefined(authData) ? this.auth : authData,
            formData
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.put(reqData);
    }
    /**
     * httpsPut
     */
    async httpsPutFormData(url, formData, params, cadata) {
        const baseData = {
            url: 'http://' + url,
            agentOptions: _.isUndefined(cadata) ? this.agentOptions : _.omitBy(cadata, _.isUndefined), formData
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.put(reqData);
    }
    /**
     * httpPatch
     */
    async httpPatch(url, requestBody, params, authData) {
        const baseData = {
            url: 'http://' + url,
            auth: _.isUndefined(authData) ? this.auth : authData,
            json: true,
            body: JSON.stringify(requestBody)
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.patch(reqData);
    }
    /**
     * httpsPatch
     */
    async httpsPatch(url, requestBody, params, cadata) {
        const baseData = {
            url: 'http://' + url,
            agentOptions: _.isUndefined(cadata) ? this.agentOptions : _.omitBy(cadata, _.isUndefined),
            json: true, body: JSON.stringify(requestBody)
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.patch(reqData);
    }
    /**
     * httpDelete
     */
    async httpDelete(url, params, authData) {
        const baseData = {
            url: 'http://' + url,
            auth: _.isUndefined(authData) ? this.auth : authData
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.del(reqData);
    }
    /**
     * httpsDelete
     */
    async httpsDelete(url, params, cadata) {
        const baseData = {
            url: 'http://' + url,
            agentOptions: _.isUndefined(cadata) ? this.agentOptions : _.omitBy(cadata, _.isUndefined)
        };
        const reqData = _.isUndefined(params) ? baseData : _.assign(baseData, { qs: params });
        return this.del(reqData);
    }
}
exports.default = APIManger;
//# sourceMappingURL=data:application/json;base64,