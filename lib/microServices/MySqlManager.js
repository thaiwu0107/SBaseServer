"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log4js = require("koa-log4");
const _ = require("lodash");
const moment = require("moment");
require("reflect-metadata");
const BaseConstant_1 = require("../config/BaseConstant");
const MySqlContext_1 = require("../models/MySqlContext");
const _log = log4js.getLogger('MySqlManger');
class MySqlManger {
    constructor() {
        this._context = MySqlContext_1.default.getInstance();
    }
    async getDBCurrentTime() {
        const sql = await this._context.getBean('main');
        const dbTime = await sql.query('select now() as time limit 1');
        sql.release();
        return moment(dbTime[0][0].time).toDate();
    }
    async getDBCurrentTimeString() {
        const sql = await this._context.getBean('main');
        const dbTime = await sql.query('select now() as time limit 1');
        sql.release();
        return dbTime[0][0].time;
    }
    async query(sqlScript, parameters, trans) {
        if (_.isUndefined(trans)) {
            const sql = await this._context.getBean('main');
            const res = await sql.query(sqlScript, parameters);
            sql.release();
            return res[0];
        }
        else {
            const res = await trans.conn.query(sqlScript, parameters);
            return res[0];
        }
    }
    async enCode(password, key) {
        const passwordKey = _.isUndefined(key) ? BaseConstant_1.BaseConstant.DB_PASSWORD_KEY : key;
        const sql = await this._context.getBean('main');
        const res = await sql.query('SELECT AES_ENCRYPT(? , ?) as password', [password, passwordKey]);
        sql.release();
        return res[0][0].password;
    }
    async deCode(password, key) {
        const passwordKey = _.isUndefined(key) ? BaseConstant_1.BaseConstant.DB_PASSWORD_KEY : key;
        const sql = await this._context.getBean('main');
        const res = await sql.query('SELECT CAST(AES_DECRYPT(? , ?) AS CHAR(50) as password', [password, passwordKey]);
        sql.release();
        return res[0][0].password;
    }
}
exports.default = MySqlManger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXlTcWxNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibWljcm9TZXJ2aWNlcy9NeVNxbE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFDbkMsNEJBQTRCO0FBQzVCLGlDQUFpQztBQUNqQyw0QkFBMEI7QUFDMUIseURBQXNEO0FBQ3RELHlEQUFrRDtBQUdsRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzdDLE1BQXFCLFdBQVc7SUFBaEM7UUFDYyxhQUFRLEdBQUcsc0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQTJDcEQsQ0FBQztJQXpDVSxLQUFLLENBQUMsZ0JBQWdCO1FBQ3pCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDL0QsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFTSxLQUFLLENBQUMsc0JBQXNCO1FBQy9CLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDL0QsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2QsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQWlCLEVBQUUsVUFBa0IsRUFBRSxLQUFtQjtRQUN6RSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoRCxNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ25ELEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNkLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO2FBQU07WUFDSCxNQUFNLEdBQUcsR0FBRyxNQUFPLEtBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNuRSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQWdCLEVBQUUsR0FBWTtRQUM5QyxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQywyQkFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzVFLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFHLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDL0YsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQzlCLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQWdCLEVBQUUsR0FBWTtRQUM5QyxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQywyQkFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzVFLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLHdEQUF3RCxFQUFHLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDaEgsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQzlCLENBQUM7Q0FDSjtBQTVDRCw4QkE0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBsb2c0anMgZnJvbSAna29hLWxvZzQnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0IHsgQmFzZUNvbnN0YW50IH0gZnJvbSAnLi4vY29uZmlnL0Jhc2VDb25zdGFudCc7XG5pbXBvcnQgTXlzcWxDb250ZXh0IGZyb20gJy4uL21vZGVscy9NeVNxbENvbnRleHQnO1xuaW1wb3J0IFRyYW5zYWN0aW9uIGZyb20gJy4uL21vZGVscy9UcmFuc2FjdGlvbic7XG5cbmNvbnN0IF9sb2cgPSBsb2c0anMuZ2V0TG9nZ2VyKCdNeVNxbE1hbmdlcicpO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlTcWxNYW5nZXIge1xuICAgIHByb3RlY3RlZCBfY29udGV4dCA9IE15c3FsQ29udGV4dC5nZXRJbnN0YW5jZSgpO1xuXG4gICAgcHVibGljIGFzeW5jIGdldERCQ3VycmVudFRpbWUoKTogUHJvbWlzZTxEYXRlPiB7XG4gICAgICAgIGNvbnN0IHNxbCA9IGF3YWl0IHRoaXMuX2NvbnRleHQuZ2V0QmVhbignbWFpbicpO1xuICAgICAgICBjb25zdCBkYlRpbWUgPSBhd2FpdCBzcWwucXVlcnkoJ3NlbGVjdCBub3coKSBhcyB0aW1lIGxpbWl0IDEnKTtcbiAgICAgICAgc3FsLnJlbGVhc2UoKTtcbiAgICAgICAgcmV0dXJuIG1vbWVudChkYlRpbWVbMF1bMF0udGltZSkudG9EYXRlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldERCQ3VycmVudFRpbWVTdHJpbmcoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3Qgc3FsID0gYXdhaXQgdGhpcy5fY29udGV4dC5nZXRCZWFuKCdtYWluJyk7XG4gICAgICAgIGNvbnN0IGRiVGltZSA9IGF3YWl0IHNxbC5xdWVyeSgnc2VsZWN0IG5vdygpIGFzIHRpbWUgbGltaXQgMScpO1xuICAgICAgICBzcWwucmVsZWFzZSgpO1xuICAgICAgICByZXR1cm4gZGJUaW1lWzBdWzBdLnRpbWU7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHF1ZXJ5KHNxbFNjcmlwdDogc3RyaW5nLCBwYXJhbWV0ZXJzPzogYW55W10sIHRyYW5zPzogVHJhbnNhY3Rpb24pOiBQcm9taXNlPGFueVtdPiB7XG4gICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHRyYW5zKSkge1xuICAgICAgICAgICAgY29uc3Qgc3FsID0gYXdhaXQgdGhpcy5fY29udGV4dC5nZXRCZWFuKCdtYWluJyk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzcWwucXVlcnkoc3FsU2NyaXB0LCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIHNxbC5yZWxlYXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgKHRyYW5zIGFzIGFueSkuY29ubi5xdWVyeShzcWxTY3JpcHQsIHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc1swXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBlbkNvZGUocGFzc3dvcmQ6IHN0cmluZywga2V5Pzogc3RyaW5nKTogUHJvbWlzZTxCdWZmZXI+IHtcbiAgICAgICAgY29uc3QgcGFzc3dvcmRLZXkgPSBfLmlzVW5kZWZpbmVkKGtleSkgPyBCYXNlQ29uc3RhbnQuREJfUEFTU1dPUkRfS0VZIDoga2V5O1xuICAgICAgICBjb25zdCBzcWwgPSBhd2FpdCB0aGlzLl9jb250ZXh0LmdldEJlYW4oJ21haW4nKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgc3FsLnF1ZXJ5KCdTRUxFQ1QgQUVTX0VOQ1JZUFQoPyAsID8pIGFzIHBhc3N3b3JkJyAsIFtwYXNzd29yZCwgcGFzc3dvcmRLZXldKTtcbiAgICAgICAgc3FsLnJlbGVhc2UoKTtcbiAgICAgICAgcmV0dXJuIHJlc1swXVswXS5wYXNzd29yZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZGVDb2RlKHBhc3N3b3JkOiBzdHJpbmcsIGtleT86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkS2V5ID0gXy5pc1VuZGVmaW5lZChrZXkpID8gQmFzZUNvbnN0YW50LkRCX1BBU1NXT1JEX0tFWSA6IGtleTtcbiAgICAgICAgY29uc3Qgc3FsID0gYXdhaXQgdGhpcy5fY29udGV4dC5nZXRCZWFuKCdtYWluJyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHNxbC5xdWVyeSgnU0VMRUNUIENBU1QoQUVTX0RFQ1JZUFQoPyAsID8pIEFTIENIQVIoNTApIGFzIHBhc3N3b3JkJyAsIFtwYXNzd29yZCwgcGFzc3dvcmRLZXldKTtcbiAgICAgICAgc3FsLnJlbGVhc2UoKTtcbiAgICAgICAgcmV0dXJuIHJlc1swXVswXS5wYXNzd29yZDtcbiAgICB9XG59XG4iXX0=