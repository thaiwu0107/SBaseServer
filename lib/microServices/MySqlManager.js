"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log4js = require("koa-log4");
const _ = require("lodash");
const moment = require("moment");
require("reflect-metadata");
const BaseConstant_1 = require("../config/BaseConstant");
const MySqlContext_1 = require("../models/MySqlContext");
const _log = log4js.getLogger('MySqlManger');
class MySqlManger {
    constructor() {
        this._context = MySqlContext_1.default.getInstance();
    }
    async getDBCurrentTime() {
        const sql = await this._context.getBean('main');
        const dbTime = await sql.query('select now() as time limit 1');
        await sql.release();
        return moment(dbTime[0][0].time).toDate();
    }
    async getDBCurrentTimeString() {
        const sql = await this._context.getBean('main');
        const dbTime = await sql.query('select now() as time limit 1');
        await sql.release();
        return dbTime[0][0].time;
    }
    /**
     * 非insert專屬主要目的是為了取得查詢的資料
     * @param {string} sqlScript
     * @param {any[]} [parameters]
     * @param {Transaction} [trans]
     * @returns {Promise<any[]>}
     * @memberof MySqlManger
     */
    async query(sqlScript, parameters, trans) {
        if (_.isUndefined(trans)) {
            const sql = await this._context.getBean('main');
            const res = await sql.query(sqlScript, parameters);
            await sql.release();
            return res[0] || undefined;
        }
        else {
            const res = await trans.conn.query(sqlScript, parameters);
            return res[0] || undefined;
        }
    }
    /**
     * insert專屬可以直接取得insertId的資料
     * @param {string} sqlScript
     * @param {any[]} [parameters]
     * @param {Transaction} [trans]
     * @returns {(Promise<{
     *         insertId: number | string
     *     } | undefined>)}
     * @memberof MySqlManger
     */
    async insert(sqlScript, parameters, trans) {
        let res;
        if (_.isUndefined(trans)) {
            const sql = await this._context.getBean('main');
            res = await sql.query(sqlScript, parameters);
            await sql.release();
        }
        else {
            res = await trans.conn.query(sqlScript, parameters);
        }
        return res[0].insertId || undefined;
    }
    /**
     * 一次性多重Insert
     * @param {string} sqlScript
     * @param {Transaction} [trans]
     * @param {...any[][]} parameters 要Insert的資料每次一個陣列塞進來
     * @returns {Promise<any>}
     * @memberof MySqlManger
     */
    async bulkInsert(sqlScript, trans, ...parameters) {
        let res;
        if (_.isUndefined(trans)) {
            const sql = await this._context.getBean('main');
            res = await sql.query(sqlScript, parameters);
            await sql.release();
        }
        else {
            res = await trans.conn.query(sqlScript, parameters);
        }
        return res || undefined;
    }
    /**
     * 一次性多重Insert
     *
     * @param {string} sqlScript
     * @param {any[][]} [parameters] 要Insert的資料只能使用二維陣列
     * @param {Transaction} [trans]
     * @returns {Promise<any>}
     * @memberof MySqlManger
     */
    async bulkInsertArray(sqlScript, parameters, trans) {
        let res;
        if (_.isUndefined(trans)) {
            const sql = await this._context.getBean('main');
            res = await sql.query(sqlScript, parameters);
            await sql.release();
        }
        else {
            res = await trans.conn.query(sqlScript, parameters);
        }
        return res || undefined;
    }
    async enCode(password, key) {
        const passwordKey = _.isUndefined(key) ? BaseConstant_1.BaseConstant.DB_PASSWORD_KEY : key;
        const sql = await this._context.getBean('main');
        const res = await sql.query('SELECT AES_ENCRYPT(? , ?) as password', [password, passwordKey]);
        await sql.release();
        return res[0][0].password;
    }
    async deCode(password, key) {
        const passwordKey = _.isUndefined(key) ? BaseConstant_1.BaseConstant.DB_PASSWORD_KEY : key;
        const sql = await this._context.getBean('main');
        // tslint:disable-next-line:max-line-length
        const res = await sql.query('SELECT CAST(AES_DECRYPT(? , ?) AS CHAR(200) as password', [password, passwordKey]);
        await sql.release();
        return res[0][0].password;
    }
}
exports.default = MySqlManger;
//# sourceMappingURL=data:application/json;base64,