"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log4js = require("koa-log4");
const _ = require("lodash");
const moment = require("moment");
require("reflect-metadata");
const BaseConstant_1 = require("../config/BaseConstant");
const MySqlContext_1 = require("../models/MySqlContext");
const _log = log4js.getLogger('MySqlManger');
class MySqlManger {
    constructor() {
        this._context = MySqlContext_1.default.getInstance();
    }
    async getDBCurrentTime() {
        const sql = await this._context.getBean('main');
        const dbTime = await sql.query('select now() as time limit 1');
        return moment(dbTime[0][0].time).toDate();
    }
    async getDBCurrentTimeString() {
        const sql = await this._context.getBean('main');
        const dbTime = await sql.query('select now() as time limit 1');
        return dbTime[0][0].time;
    }
    async query(sqlScript, parameters, trans) {
        if (_.isUndefined(trans)) {
            const sql = await this._context.getBean('main');
            const res = await sql.query(sqlScript, parameters);
            sql.release();
            return res[0];
        }
        else {
            const res = await trans.query(sqlScript, parameters);
            return res[0];
        }
    }
    async enCode(password, key) {
        const passwordKey = _.isUndefined(key) ? BaseConstant_1.BaseConstant.DB_PASSWORD_KEY : key;
        const sql = await this._context.getBean('main');
        const res = await sql.query('SELECT AES_ENCRYPT(? , ?) as password', [password, passwordKey]);
        sql.release();
        return res[0][0].password;
    }
    async deCode(password, key) {
        const passwordKey = _.isUndefined(key) ? BaseConstant_1.BaseConstant.DB_PASSWORD_KEY : key;
        const sql = await this._context.getBean('main');
        const res = await sql.query('SELECT CAST(AES_DECRYPT(? , ?) AS CHAR(50) as password', [password, passwordKey]);
        sql.release();
        return res[0][0].password;
    }
}
exports.default = MySqlManger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXlTcWxNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibWljcm9TZXJ2aWNlcy9NeVNxbE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFDbkMsNEJBQTRCO0FBQzVCLGlDQUFpQztBQUNqQyw0QkFBMEI7QUFDMUIseURBQXNEO0FBQ3RELHlEQUFrRDtBQUdsRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzdDLE1BQXFCLFdBQVc7SUFBaEM7UUFDYyxhQUFRLEdBQUcsc0JBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQXlDcEQsQ0FBQztJQXZDVSxLQUFLLENBQUMsZ0JBQWdCO1FBQ3pCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDL0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFTSxLQUFLLENBQUMsc0JBQXNCO1FBQy9CLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDL0QsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzdCLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQWlCLEVBQUUsVUFBa0IsRUFBRSxLQUFtQjtRQUN6RSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoRCxNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ25ELEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNkLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO2FBQU07WUFDSCxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3JELE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBZ0IsRUFBRSxHQUFZO1FBQzlDLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLDJCQUFZLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDNUUsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRCxNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEVBQUcsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUMvRixHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBZ0IsRUFBRSxHQUFZO1FBQzlDLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLDJCQUFZLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDNUUsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoRCxNQUFNLEdBQUcsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsd0RBQXdELEVBQUcsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNoSCxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBMUNELDhCQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGxvZzRqcyBmcm9tICdrb2EtbG9nNCc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgeyBCYXNlQ29uc3RhbnQgfSBmcm9tICcuLi9jb25maWcvQmFzZUNvbnN0YW50JztcbmltcG9ydCBNeXNxbENvbnRleHQgZnJvbSAnLi4vbW9kZWxzL015U3FsQ29udGV4dCc7XG5pbXBvcnQgVHJhbnNhY3Rpb24gZnJvbSAnLi4vbW9kZWxzL1RyYW5zYWN0aW9uJztcblxuY29uc3QgX2xvZyA9IGxvZzRqcy5nZXRMb2dnZXIoJ015U3FsTWFuZ2VyJyk7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeVNxbE1hbmdlciB7XG4gICAgcHJvdGVjdGVkIF9jb250ZXh0ID0gTXlzcWxDb250ZXh0LmdldEluc3RhbmNlKCk7XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0REJDdXJyZW50VGltZSgpOiBQcm9taXNlPERhdGU+IHtcbiAgICAgICAgY29uc3Qgc3FsID0gYXdhaXQgdGhpcy5fY29udGV4dC5nZXRCZWFuKCdtYWluJyk7XG4gICAgICAgIGNvbnN0IGRiVGltZSA9IGF3YWl0IHNxbC5xdWVyeSgnc2VsZWN0IG5vdygpIGFzIHRpbWUgbGltaXQgMScpO1xuICAgICAgICByZXR1cm4gbW9tZW50KGRiVGltZVswXVswXS50aW1lKS50b0RhdGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0REJDdXJyZW50VGltZVN0cmluZygpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBzcWwgPSBhd2FpdCB0aGlzLl9jb250ZXh0LmdldEJlYW4oJ21haW4nKTtcbiAgICAgICAgY29uc3QgZGJUaW1lID0gYXdhaXQgc3FsLnF1ZXJ5KCdzZWxlY3Qgbm93KCkgYXMgdGltZSBsaW1pdCAxJyk7XG4gICAgICAgIHJldHVybiBkYlRpbWVbMF1bMF0udGltZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcXVlcnkoc3FsU2NyaXB0OiBzdHJpbmcsIHBhcmFtZXRlcnM/OiBhbnlbXSwgdHJhbnM/OiBUcmFuc2FjdGlvbik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHRyYW5zKSkge1xuICAgICAgICAgICAgY29uc3Qgc3FsID0gYXdhaXQgdGhpcy5fY29udGV4dC5nZXRCZWFuKCdtYWluJyk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzcWwucXVlcnkoc3FsU2NyaXB0LCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIHNxbC5yZWxlYXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdHJhbnMucXVlcnkoc3FsU2NyaXB0LCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIHJldHVybiByZXNbMF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZW5Db2RlKHBhc3N3b3JkOiBzdHJpbmcsIGtleT86IHN0cmluZyk6IFByb21pc2U8QnVmZmVyPiB7XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkS2V5ID0gXy5pc1VuZGVmaW5lZChrZXkpID8gQmFzZUNvbnN0YW50LkRCX1BBU1NXT1JEX0tFWSA6IGtleTtcbiAgICAgICAgY29uc3Qgc3FsID0gYXdhaXQgdGhpcy5fY29udGV4dC5nZXRCZWFuKCdtYWluJyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHNxbC5xdWVyeSgnU0VMRUNUIEFFU19FTkNSWVBUKD8gLCA/KSBhcyBwYXNzd29yZCcgLCBbcGFzc3dvcmQsIHBhc3N3b3JkS2V5XSk7XG4gICAgICAgIHNxbC5yZWxlYXNlKCk7XG4gICAgICAgIHJldHVybiByZXNbMF1bMF0ucGFzc3dvcmQ7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGRlQ29kZShwYXNzd29yZDogc3RyaW5nLCBrZXk/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBwYXNzd29yZEtleSA9IF8uaXNVbmRlZmluZWQoa2V5KSA/IEJhc2VDb25zdGFudC5EQl9QQVNTV09SRF9LRVkgOiBrZXk7XG4gICAgICAgIGNvbnN0IHNxbCA9IGF3YWl0IHRoaXMuX2NvbnRleHQuZ2V0QmVhbignbWFpbicpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzcWwucXVlcnkoJ1NFTEVDVCBDQVNUKEFFU19ERUNSWVBUKD8gLCA/KSBBUyBDSEFSKDUwKSBhcyBwYXNzd29yZCcgLCBbcGFzc3dvcmQsIHBhc3N3b3JkS2V5XSk7XG4gICAgICAgIHNxbC5yZWxlYXNlKCk7XG4gICAgICAgIHJldHVybiByZXNbMF1bMF0ucGFzc3dvcmQ7XG4gICAgfVxufVxuIl19