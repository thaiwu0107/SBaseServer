"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const clusterws_1 = require("clusterws");
exports.WSServer = clusterws_1.default;
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
exports.buildProviderModule = inversify_binding_decorators_1.buildProviderModule;
const inversify_koa_utils_1 = require("inversify-koa-utils");
exports.all = inversify_koa_utils_1.all;
exports.controller = inversify_koa_utils_1.controller;
exports.cookies = inversify_koa_utils_1.cookies;
exports.httpDelete = inversify_koa_utils_1.httpDelete;
exports.httpGet = inversify_koa_utils_1.httpGet;
exports.httpHead = inversify_koa_utils_1.httpHead;
exports.httpMethod = inversify_koa_utils_1.httpMethod;
exports.httpPatch = inversify_koa_utils_1.httpPatch;
exports.httpPost = inversify_koa_utils_1.httpPost;
exports.httpPut = inversify_koa_utils_1.httpPut;
exports.InversifyKoaServer = inversify_koa_utils_1.InversifyKoaServer;
exports.next = inversify_koa_utils_1.next;
exports.queryParam = inversify_koa_utils_1.queryParam;
exports.request = inversify_koa_utils_1.request;
exports.requestBody = inversify_koa_utils_1.requestBody;
exports.requestHeaders = inversify_koa_utils_1.requestHeaders;
exports.requestParam = inversify_koa_utils_1.requestParam;
exports.response = inversify_koa_utils_1.response;
exports.TYPE = inversify_koa_utils_1.TYPE;
const bodyParser = require("koa-bodyparser");
exports.bodyParser = bodyParser;
const jwt = require("koa-jwt");
exports.jwt = jwt;
const log4js = require("koa-log4");
exports.log4js = log4js;
const koa_req_validator_1 = require("koa-req-validator");
exports.validate = koa_req_validator_1.default;
const Router = require("koa-router");
exports.Router = Router;
const cors = require("koa2-cors");
exports.cors = cors;
const BaseConstant_1 = require("./config/BaseConstant");
exports.BaseConstant = BaseConstant_1.BaseConstant;
const BaseHttpStatusCode_1 = require("./config/BaseHttpStatusCode");
exports.BaseHttpStatusCode = BaseHttpStatusCode_1.BaseHttpStatusCode;
const enum_SQLServerType_1 = require("./config/enum.SQLServerType");
exports.SQLServerType = enum_SQLServerType_1.SQLServerType;
const GServer_1 = require("./GServer");
exports.GServer = GServer_1.default;
const ioc_1 = require("./ioc/ioc");
exports.autoProvide = ioc_1.autoProvide;
exports.container = ioc_1.container;
exports.inject = ioc_1.inject;
exports.provide = ioc_1.provide;
exports.provideNamed = ioc_1.provideNamed;
const iocTracer_1 = require("./ioc/iocTracer");
exports.IocTracer = iocTracer_1.default;
const models_1 = require("./models");
exports.ORMContext = models_1.ORMContext;
const AnyEntity_1 = require("./models/AnyEntity");
exports.AnyEntity = AnyEntity_1.default;
const BaseController_1 = require("./models/BaseController");
exports.BaseController = BaseController_1.default;
const BaseEntity_1 = require("./models/BaseEntity");
exports.BaseEntity = BaseEntity_1.default;
const BaseExceptions_1 = require("./models/BaseExceptions");
exports.BaseExceptions = BaseExceptions_1.default;
const BaseRepository_1 = require("./models/BaseRepository");
exports.BaseRepository = BaseRepository_1.default;
const BaseResponse_1 = require("./models/BaseResponse");
exports.BaseResponse = BaseResponse_1.default;
const BaseService_1 = require("./models/BaseService");
exports.BaseService = BaseService_1.default;
const BaseSocketController_1 = require("./models/BaseSocketController");
exports.BaseSocketController = BaseSocketController_1.default;
const BaseUserInfo_1 = require("./models/BaseUserInfo");
exports.BaseUserInfo = BaseUserInfo_1.default;
const Decorators_1 = require("./models/Decorators");
exports.Entity = Decorators_1.Entity;
const DocChanged_1 = require("./models/DocChanged");
exports.DocChanged = DocChanged_1.default;
const HttpInitSetting_1 = require("./models/HttpInitSetting");
exports.HttpInitSetting = HttpInitSetting_1.default;
const LibsExceptions_1 = require("./models/LibsExceptions");
exports.LibsExceptions = LibsExceptions_1.LibsExceptions;
const NotImplemented_1 = require("./models/NotImplemented");
exports.NotImplemented = NotImplemented_1.default;
const SocketInitSetting_1 = require("./models/SocketInitSetting");
exports.SocketInitSetting = SocketInitSetting_1.default;
const Transaction_1 = require("./models/Transaction");
exports.Transaction = Transaction_1.default;
const SServer_1 = require("./SServer");
exports.SServer = SServer_1.default;
const BaseDataHelper_1 = require("./utils/BaseDataHelper");
exports.BaseDataHelper = BaseDataHelper_1.default;
const BaseSQLHelper_1 = require("./utils/BaseSQLHelper");
exports.BaseSQLHelper = BaseSQLHelper_1.default;
const BaseUtils_1 = require("./utils/BaseUtils");
exports.BaseUtils = BaseUtils_1.default;
const WSServer_1 = require("./WSServer");
exports.Init = WSServer_1.Init;
exports.Worker = WSServer_1.Worker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFrQztBQXlEakIsbUJBekRWLG1CQUFTLENBeURTO0FBeER6QiwrRUFBbUU7QUFxRC9ELDhCQXJESyxrREFBbUIsQ0FxREw7QUFwRHZCLDZEQUs2QjtBQTZGekIsY0FqR0EseUJBQUcsQ0FpR0E7QUFUSCxxQkF2RkEsZ0NBQVUsQ0F1RkE7QUFpQlYsa0JBeEdZLDZCQUFPLENBd0daO0FBUFAscUJBakdxQixnQ0FBVSxDQWlHckI7QUFMVixrQkE1RmlDLDZCQUFPLENBNEZqQztBQUdQLG1CQS9GMEMsOEJBQVEsQ0ErRjFDO0FBRlIscUJBN0ZvRCxnQ0FBVSxDQTZGcEQ7QUFDVixvQkE5RmdFLCtCQUFTLENBOEZoRTtBQU5ULG1CQXhGMkUsOEJBQVEsQ0F3RjNFO0FBQ1Isa0JBekZxRiw2QkFBTyxDQXlGckY7QUF4Q1AsNkJBaERBLHdDQUFrQixDQWdEQTtBQXdEbEIsZUF4R29CLDBCQUFJLENBd0dwQjtBQUpKLHFCQXBHMEIsZ0NBQVUsQ0FvRzFCO0FBSFYsa0JBakdzQyw2QkFBTyxDQWlHdEM7QUFJUCxzQkFyRytDLGlDQUFXLENBcUcvQztBQUNYLHlCQXJHQSxvQ0FBYyxDQXFHQTtBQUhkLHVCQWxHZ0Isa0NBQVksQ0FrR2hCO0FBRFosbUJBakc4Qiw4QkFBUSxDQWlHOUI7QUFUUixlQXhGd0MsMEJBQUksQ0F3RnhDO0FBdEZSLDZDQUE2QztBQTRDekMsZ0NBQVU7QUEzQ2QsK0JBQStCO0FBMEMzQixrQkFBRztBQXpDUCxtQ0FBbUM7QUF3Qy9CLHdCQUFNO0FBdkNWLHlEQUF5QztBQW9GckMsbUJBcEZHLDJCQUFRLENBb0ZIO0FBbkZaLHFDQUFxQztBQXFDakMsd0JBQU07QUFwQ1Ysa0NBQWtDO0FBbUM5QixvQkFBSTtBQWxDUix3REFBcUQ7QUFvRWpELHVCQXBFSywyQkFBWSxDQW9FTDtBQW5FaEIsb0VBQWlFO0FBa0U3RCw2QkFsRUssdUNBQWtCLENBa0VMO0FBakV0QixvRUFBNEQ7QUFtRXhELHdCQW5FSyxrQ0FBYSxDQW1FTDtBQWxFakIsdUNBQWdDO0FBMkM1QixrQkEzQ0csaUJBQU8sQ0EyQ0g7QUExQ1gsbUNBQWtGO0FBcUU5RSxzQkFyRUssaUJBQVcsQ0FxRUw7QUFEWCxvQkFwRWtCLGVBQVMsQ0FvRWxCO0FBSVQsaUJBeEU2QixZQUFNLENBd0U3QjtBQUZOLGtCQXRFcUMsYUFBTyxDQXNFckM7QUFDUCx1QkF2RThDLGtCQUFZLENBdUU5QztBQXRFaEIsK0NBQXdDO0FBNEJwQyxvQkE1QkcsbUJBQVMsQ0E0Qkg7QUEzQmIscUNBQXNDO0FBa0RsQyxxQkFsREssbUJBQVUsQ0FrREw7QUFqRGQsa0RBQTJDO0FBMkR2QyxvQkEzREcsbUJBQVMsQ0EyREg7QUExRGIsNERBQXFEO0FBdURqRCx5QkF2REcsd0JBQWMsQ0F1REg7QUF0RGxCLG9EQUE2QztBQXFEekMscUJBckRHLG9CQUFVLENBcURIO0FBcERkLDREQUFxRDtBQW1EakQseUJBbkRHLHdCQUFjLENBbURIO0FBbERsQiw0REFBcUQ7QUFpRGpELHlCQWpERyx3QkFBYyxDQWlESDtBQWhEbEIsd0RBQWlEO0FBNkM3Qyx1QkE3Q0csc0JBQVksQ0E2Q0g7QUE1Q2hCLHNEQUErQztBQThDM0Msc0JBOUNHLHFCQUFXLENBOENIO0FBN0NmLHdFQUFpRTtBQThCN0QsK0JBOUJHLDhCQUFvQixDQThCSDtBQTdCeEIsd0RBQWlEO0FBMkM3Qyx1QkEzQ0csc0JBQVksQ0EyQ0g7QUExQ2hCLG9EQUEyQztBQWlEdkMsaUJBakRJLG1CQUFNLENBaURKO0FBaERWLG9EQUE2QztBQStDekMscUJBL0NHLG9CQUFVLENBK0NIO0FBOUNkLDhEQUF1RDtBQStCbkQsMEJBL0JHLHlCQUFlLENBK0JIO0FBN0JuQiw0REFBeUQ7QUFtQ3JELHlCQW5DSywrQkFBYyxDQW1DTDtBQWxDbEIsNERBQXFEO0FBaUNqRCx5QkFqQ0csd0JBQWMsQ0FpQ0g7QUFoQ2xCLGtFQUEyRDtBQXlCdkQsNEJBekJHLDJCQUFpQixDQXlCSDtBQXhCckIsc0RBQStDO0FBOEIzQyxzQkE5QkcscUJBQVcsQ0E4Qkg7QUE1QmYsdUNBQWdDO0FBdUI1QixrQkF2QkcsaUJBQU8sQ0F1Qkg7QUF0QlgsMkRBQW9EO0FBMEJoRCx5QkExQkcsd0JBQWMsQ0EwQkg7QUF6QmxCLHlEQUFrRDtBQXdCOUMsd0JBeEJHLHVCQUFhLENBd0JIO0FBdkJqQixpREFBMEM7QUFzQnRDLG9CQXRCRyxtQkFBUyxDQXNCSDtBQXBCYix5Q0FBMEM7QUFZdEMsZUFaSyxlQUFJLENBWUw7QUFESixpQkFYVyxpQkFBTSxDQVdYIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENsdXN0ZXJXUyBmcm9tICdjbHVzdGVyd3MnO1xuaW1wb3J0IHsgYnVpbGRQcm92aWRlck1vZHVsZSB9IGZyb20gJ2ludmVyc2lmeS1iaW5kaW5nLWRlY29yYXRvcnMnO1xuaW1wb3J0IHtcbiAgICBhbGwsXG4gICAgY29udHJvbGxlciwgY29va2llcywgaHR0cERlbGV0ZSwgaHR0cEdldCwgaHR0cEhlYWQsIGh0dHBNZXRob2QsIGh0dHBQYXRjaCwgaHR0cFBvc3QsIGh0dHBQdXQsXG4gICAgSW52ZXJzaWZ5S29hU2VydmVyLCBuZXh0LCBxdWVyeVBhcmFtLCByZXF1ZXN0LCByZXF1ZXN0Qm9keSxcbiAgICByZXF1ZXN0SGVhZGVycywgcmVxdWVzdFBhcmFtLCByZXNwb25zZSwgVFlQRVxufSBmcm9tICdpbnZlcnNpZnkta29hLXV0aWxzJztcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSAna29hLWJvZHlwYXJzZXInO1xuaW1wb3J0ICogYXMgand0IGZyb20gJ2tvYS1qd3QnO1xuaW1wb3J0ICogYXMgbG9nNGpzIGZyb20gJ2tvYS1sb2c0JztcbmltcG9ydCB2YWxpZGF0ZSBmcm9tICdrb2EtcmVxLXZhbGlkYXRvcic7XG5pbXBvcnQgKiBhcyBSb3V0ZXIgZnJvbSAna29hLXJvdXRlcic7XG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gJ2tvYTItY29ycyc7XG5pbXBvcnQgeyBCYXNlQ29uc3RhbnQgfSBmcm9tICcuL2NvbmZpZy9CYXNlQ29uc3RhbnQnO1xuaW1wb3J0IHsgQmFzZUh0dHBTdGF0dXNDb2RlIH0gZnJvbSAnLi9jb25maWcvQmFzZUh0dHBTdGF0dXNDb2RlJztcbmltcG9ydCB7IFNRTFNlcnZlclR5cGUgfSBmcm9tICcuL2NvbmZpZy9lbnVtLlNRTFNlcnZlclR5cGUnO1xuaW1wb3J0IEdTZXJ2ZXIgZnJvbSAnLi9HU2VydmVyJztcbmltcG9ydCB7IGF1dG9Qcm92aWRlLCBjb250YWluZXIsIGluamVjdCwgcHJvdmlkZSwgcHJvdmlkZU5hbWVkIH0gZnJvbSAnLi9pb2MvaW9jJztcbmltcG9ydCBJb2NUcmFjZXIgZnJvbSAnLi9pb2MvaW9jVHJhY2VyJztcbmltcG9ydCB7IE9STUNvbnRleHQgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgQW55RW50aXR5IGZyb20gJy4vbW9kZWxzL0FueUVudGl0eSc7XG5pbXBvcnQgQmFzZUNvbnRyb2xsZXIgZnJvbSAnLi9tb2RlbHMvQmFzZUNvbnRyb2xsZXInO1xuaW1wb3J0IEJhc2VFbnRpdHkgZnJvbSAnLi9tb2RlbHMvQmFzZUVudGl0eSc7XG5pbXBvcnQgQmFzZUV4Y2VwdGlvbnMgZnJvbSAnLi9tb2RlbHMvQmFzZUV4Y2VwdGlvbnMnO1xuaW1wb3J0IEJhc2VSZXBvc2l0b3J5IGZyb20gJy4vbW9kZWxzL0Jhc2VSZXBvc2l0b3J5JztcbmltcG9ydCBCYXNlUmVzcG9uc2UgZnJvbSAnLi9tb2RlbHMvQmFzZVJlc3BvbnNlJztcbmltcG9ydCBCYXNlU2VydmljZSBmcm9tICcuL21vZGVscy9CYXNlU2VydmljZSc7XG5pbXBvcnQgQmFzZVNvY2tldENvbnRyb2xsZXIgZnJvbSAnLi9tb2RlbHMvQmFzZVNvY2tldENvbnRyb2xsZXInO1xuaW1wb3J0IEJhc2VVc2VySW5mbyBmcm9tICcuL21vZGVscy9CYXNlVXNlckluZm8nO1xuaW1wb3J0IHtFbnRpdHl9IGZyb20gJy4vbW9kZWxzL0RlY29yYXRvcnMnO1xuaW1wb3J0IERvY0NoYW5nZWQgZnJvbSAnLi9tb2RlbHMvRG9jQ2hhbmdlZCc7XG5pbXBvcnQgSHR0cEluaXRTZXR0aW5nIGZyb20gJy4vbW9kZWxzL0h0dHBJbml0U2V0dGluZyc7XG5pbXBvcnQgSUJhc2VDb250ZXh0IGZyb20gJy4vbW9kZWxzL0lCYXNlQ29udGV4dCc7XG5pbXBvcnQgeyBMaWJzRXhjZXB0aW9ucyB9IGZyb20gJy4vbW9kZWxzL0xpYnNFeGNlcHRpb25zJztcbmltcG9ydCBOb3RJbXBsZW1lbnRlZCBmcm9tICcuL21vZGVscy9Ob3RJbXBsZW1lbnRlZCc7XG5pbXBvcnQgU29ja2V0SW5pdFNldHRpbmcgZnJvbSAnLi9tb2RlbHMvU29ja2V0SW5pdFNldHRpbmcnO1xuaW1wb3J0IFRyYW5zYWN0aW9uIGZyb20gJy4vbW9kZWxzL1RyYW5zYWN0aW9uJztcbmltcG9ydCBJU2VydmVySW5pdE9uY2VFdmVudCBmcm9tICcuL1NlcnZlckV2ZW50L1NlcnZlckluaXRPbmNlRXZlbnQnO1xuaW1wb3J0IFNTZXJ2ZXIgZnJvbSAnLi9TU2VydmVyJztcbmltcG9ydCBCYXNlRGF0YUhlbHBlciBmcm9tICcuL3V0aWxzL0Jhc2VEYXRhSGVscGVyJztcbmltcG9ydCBCYXNlU1FMSGVscGVyIGZyb20gJy4vdXRpbHMvQmFzZVNRTEhlbHBlcic7XG5pbXBvcnQgQmFzZVV0aWxzIGZyb20gJy4vdXRpbHMvQmFzZVV0aWxzJztcbmltcG9ydCB7IElRdWVyeU9wdGlvbnMgfSBmcm9tICcuL3V0aWxzL0Rhb09wZXJhdG9yJztcbmltcG9ydCB7IEluaXQsIFdvcmtlciB9IGZyb20gJy4vV1NTZXJ2ZXInO1xuXG5leHBvcnQge1xuICAgIElvY1RyYWNlcixcbiAgICBjb3JzLFxuICAgIFJvdXRlcixcbiAgICBsb2c0anMsXG4gICAgand0LFxuICAgIGJvZHlQYXJzZXIsXG4gICAgSW52ZXJzaWZ5S29hU2VydmVyLFxuICAgIGJ1aWxkUHJvdmlkZXJNb2R1bGUsXG4gICAgV29ya2VyLFxuICAgIEluaXQsXG4gICAgQ2x1c3RlcldTIGFzIFdTU2VydmVyLFxuICAgIEJhc2VTb2NrZXRDb250cm9sbGVyLFxuICAgIElTZXJ2ZXJJbml0T25jZUV2ZW50LFxuICAgIEdTZXJ2ZXIsXG4gICAgU29ja2V0SW5pdFNldHRpbmcsXG4gICAgU1NlcnZlcixcbiAgICBIdHRwSW5pdFNldHRpbmcsXG4gICAgQmFzZVV0aWxzLFxuICAgIEJhc2VTUUxIZWxwZXIsXG4gICAgQmFzZURhdGFIZWxwZXIsXG4gICAgVHJhbnNhY3Rpb24sXG4gICAgTm90SW1wbGVtZW50ZWQsXG4gICAgTGlic0V4Y2VwdGlvbnMsXG4gICAgT1JNQ29udGV4dCxcbiAgICBCYXNlUmVzcG9uc2UsXG4gICAgQmFzZVVzZXJJbmZvLFxuICAgIEJhc2VTZXJ2aWNlLFxuICAgIEJhc2VSZXBvc2l0b3J5LFxuICAgIEJhc2VFeGNlcHRpb25zLFxuICAgIEJhc2VFbnRpdHksXG4gICAgQmFzZUNvbnRyb2xsZXIsXG4gICAgRG9jQ2hhbmdlZCxcbiAgICBFbnRpdHksXG4gICAgQW55RW50aXR5LFxuICAgIEJhc2VIdHRwU3RhdHVzQ29kZSxcbiAgICBCYXNlQ29uc3RhbnQsXG4gICAgU1FMU2VydmVyVHlwZSxcbiAgICBJQmFzZUNvbnRleHQsXG4gICAgSVF1ZXJ5T3B0aW9ucyxcbiAgICBjb250YWluZXIsXG4gICAgYXV0b1Byb3ZpZGUsXG4gICAgcHJvdmlkZSxcbiAgICBwcm92aWRlTmFtZWQsXG4gICAgaW5qZWN0LFxuICAgIGNvbnRyb2xsZXIsXG4gICAgaHR0cFBvc3QsXG4gICAgaHR0cFB1dCxcbiAgICBUWVBFLFxuICAgIHZhbGlkYXRlLFxuICAgIGh0dHBHZXQsXG4gICAgaHR0cE1ldGhvZCxcbiAgICBodHRwUGF0Y2gsXG4gICAgaHR0cEhlYWQsXG4gICAgYWxsLFxuICAgIGh0dHBEZWxldGUsXG4gICAgcmVxdWVzdCxcbiAgICByZXNwb25zZSxcbiAgICByZXF1ZXN0UGFyYW0sXG4gICAgcXVlcnlQYXJhbSxcbiAgICByZXF1ZXN0Qm9keSxcbiAgICByZXF1ZXN0SGVhZGVycyxcbiAgICBjb29raWVzLFxuICAgIG5leHRcbn07XG4iXX0=