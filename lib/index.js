"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const clusterws_1 = require("clusterws");
exports.WSServer = clusterws_1.default;
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
exports.buildProviderModule = inversify_binding_decorators_1.buildProviderModule;
const inversify_koa_utils_1 = require("inversify-koa-utils");
exports.all = inversify_koa_utils_1.all;
exports.controller = inversify_koa_utils_1.controller;
exports.cookies = inversify_koa_utils_1.cookies;
exports.httpDelete = inversify_koa_utils_1.httpDelete;
exports.httpGet = inversify_koa_utils_1.httpGet;
exports.httpHead = inversify_koa_utils_1.httpHead;
exports.httpMethod = inversify_koa_utils_1.httpMethod;
exports.httpPatch = inversify_koa_utils_1.httpPatch;
exports.httpPost = inversify_koa_utils_1.httpPost;
exports.httpPut = inversify_koa_utils_1.httpPut;
exports.InversifyKoaServer = inversify_koa_utils_1.InversifyKoaServer;
exports.next = inversify_koa_utils_1.next;
exports.queryParam = inversify_koa_utils_1.queryParam;
exports.request = inversify_koa_utils_1.request;
exports.requestBody = inversify_koa_utils_1.requestBody;
exports.requestHeaders = inversify_koa_utils_1.requestHeaders;
exports.requestParam = inversify_koa_utils_1.requestParam;
exports.response = inversify_koa_utils_1.response;
exports.TYPE = inversify_koa_utils_1.TYPE;
const bodyParser = require("koa-bodyparser");
exports.bodyParser = bodyParser;
const jwt = require("koa-jwt");
exports.jwt = jwt;
const log4js = require("koa-log4");
exports.log4js = log4js;
const koa_req_validator_1 = require("koa-req-validator");
exports.validate = koa_req_validator_1.default;
const Router = require("koa-router");
exports.Router = Router;
const cors = require("koa2-cors");
exports.cors = cors;
const BaseConstant_1 = require("./config/BaseConstant");
exports.BaseConstant = BaseConstant_1.BaseConstant;
const BaseHttpStatusCode_1 = require("./config/BaseHttpStatusCode");
exports.BaseHttpStatusCode = BaseHttpStatusCode_1.BaseHttpStatusCode;
const enum_SQLServerType_1 = require("./config/enum.SQLServerType");
exports.SQLServerType = enum_SQLServerType_1.SQLServerType;
const GServer_1 = require("./GServer");
exports.GServer = GServer_1.default;
const ioc_1 = require("./ioc/ioc");
exports.autoProvide = ioc_1.autoProvide;
exports.container = ioc_1.container;
exports.inject = ioc_1.inject;
exports.provide = ioc_1.provide;
exports.provideNamed = ioc_1.provideNamed;
const iocTracer_1 = require("./ioc/iocTracer");
exports.IocTracer = iocTracer_1.default;
const AnyEntity_1 = require("./models/AnyEntity");
exports.AnyEntity = AnyEntity_1.default;
const BaseController_1 = require("./models/BaseController");
exports.BaseController = BaseController_1.default;
const BaseEntity_1 = require("./models/BaseEntity");
exports.BaseEntity = BaseEntity_1.default;
const BaseExceptions_1 = require("./models/BaseExceptions");
exports.BaseExceptions = BaseExceptions_1.default;
const BaseRedisHashZntity_1 = require("./models/BaseRedisHashZntity");
exports.BaseRedisHashZntity = BaseRedisHashZntity_1.default;
const BaseRepository_1 = require("./models/BaseRepository");
exports.BaseRepository = BaseRepository_1.default;
const BaseResponse_1 = require("./models/BaseResponse");
exports.BaseResponse = BaseResponse_1.default;
const BaseService_1 = require("./models/BaseService");
exports.BaseService = BaseService_1.default;
const BaseSocketController_1 = require("./models/BaseSocketController");
exports.BaseSocketController = BaseSocketController_1.default;
const BaseUserInfo_1 = require("./models/BaseUserInfo");
exports.BaseUserInfo = BaseUserInfo_1.default;
const Decorators_1 = require("./models/Decorators");
exports.Entity = Decorators_1.Entity;
const DocChanged_1 = require("./models/DocChanged");
exports.DocChanged = DocChanged_1.default;
const HttpInitSetting_1 = require("./models/HttpInitSetting");
exports.HttpInitSetting = HttpInitSetting_1.default;
const LibsExceptions_1 = require("./models/LibsExceptions");
exports.LibsExceptions = LibsExceptions_1.LibsExceptions;
const MySqlContext_1 = require("./models/MySqlContext");
exports.MysqlContext = MySqlContext_1.default;
const NotImplemented_1 = require("./models/NotImplemented");
exports.NotImplemented = NotImplemented_1.default;
const RedisContext_1 = require("./models/RedisContext");
exports.RedisContext = RedisContext_1.default;
const SocketInitSetting_1 = require("./models/SocketInitSetting");
exports.SocketInitSetting = SocketInitSetting_1.default;
const Transaction_1 = require("./models/Transaction");
exports.Transaction = Transaction_1.default;
const SServer_1 = require("./SServer");
exports.SServer = SServer_1.default;
const BaseDataHelper_1 = require("./utils/BaseDataHelper");
exports.BaseDataHelper = BaseDataHelper_1.default;
const BaseSQLHelper_1 = require("./utils/BaseSQLHelper");
exports.BaseSQLHelper = BaseSQLHelper_1.default;
const BaseUtils_1 = require("./utils/BaseUtils");
exports.BaseUtils = BaseUtils_1.default;
const WSServer_1 = require("./WSServer");
exports.Init = WSServer_1.Init;
exports.Worker = WSServer_1.Worker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFrQztBQThEakIsbUJBOURWLG1CQUFTLENBOERTO0FBN0R6QiwrRUFBbUU7QUEwRC9ELDhCQTFESyxrREFBbUIsQ0EwREw7QUF6RHZCLDZEQUs2QjtBQWtHekIsY0F0R0EseUJBQUcsQ0FzR0E7QUFUSCxxQkE1RkEsZ0NBQVUsQ0E0RkE7QUFpQlYsa0JBN0dZLDZCQUFPLENBNkdaO0FBUFAscUJBdEdxQixnQ0FBVSxDQXNHckI7QUFMVixrQkFqR2lDLDZCQUFPLENBaUdqQztBQUdQLG1CQXBHMEMsOEJBQVEsQ0FvRzFDO0FBRlIscUJBbEdvRCxnQ0FBVSxDQWtHcEQ7QUFDVixvQkFuR2dFLCtCQUFTLENBbUdoRTtBQU5ULG1CQTdGMkUsOEJBQVEsQ0E2RjNFO0FBQ1Isa0JBOUZxRiw2QkFBTyxDQThGckY7QUF4Q1AsNkJBckRBLHdDQUFrQixDQXFEQTtBQXdEbEIsZUE3R29CLDBCQUFJLENBNkdwQjtBQUpKLHFCQXpHMEIsZ0NBQVUsQ0F5RzFCO0FBSFYsa0JBdEdzQyw2QkFBTyxDQXNHdEM7QUFJUCxzQkExRytDLGlDQUFXLENBMEcvQztBQUNYLHlCQTFHQSxvQ0FBYyxDQTBHQTtBQUhkLHVCQXZHZ0Isa0NBQVksQ0F1R2hCO0FBRFosbUJBdEc4Qiw4QkFBUSxDQXNHOUI7QUFUUixlQTdGd0MsMEJBQUksQ0E2RnhDO0FBM0ZSLDZDQUE2QztBQWlEekMsZ0NBQVU7QUFoRGQsK0JBQStCO0FBK0MzQixrQkFBRztBQTlDUCxtQ0FBbUM7QUE2Qy9CLHdCQUFNO0FBNUNWLHlEQUF5QztBQXlGckMsbUJBekZHLDJCQUFRLENBeUZIO0FBeEZaLHFDQUFxQztBQTBDakMsd0JBQU07QUF6Q1Ysa0NBQWtDO0FBd0M5QixvQkFBSTtBQXZDUix3REFBcUQ7QUF5RWpELHVCQXpFSywyQkFBWSxDQXlFTDtBQXhFaEIsb0VBQWlFO0FBdUU3RCw2QkF2RUssdUNBQWtCLENBdUVMO0FBdEV0QixvRUFBNEQ7QUF3RXhELHdCQXhFSyxrQ0FBYSxDQXdFTDtBQXZFakIsdUNBQWdDO0FBZ0Q1QixrQkFoREcsaUJBQU8sQ0FnREg7QUEvQ1gsbUNBQWtGO0FBMEU5RSxzQkExRUssaUJBQVcsQ0EwRUw7QUFEWCxvQkF6RWtCLGVBQVMsQ0F5RWxCO0FBSVQsaUJBN0U2QixZQUFNLENBNkU3QjtBQUZOLGtCQTNFcUMsYUFBTyxDQTJFckM7QUFDUCx1QkE1RThDLGtCQUFZLENBNEU5QztBQTNFaEIsK0NBQXdDO0FBaUNwQyxvQkFqQ0csbUJBQVMsQ0FpQ0g7QUEvQmIsa0RBQTJDO0FBZ0V2QyxvQkFoRUcsbUJBQVMsQ0FnRUg7QUEvRGIsNERBQXFEO0FBNERqRCx5QkE1REcsd0JBQWMsQ0E0REg7QUEzRGxCLG9EQUE2QztBQTBEekMscUJBMURHLG9CQUFVLENBMERIO0FBekRkLDREQUFxRDtBQXdEakQseUJBeERHLHdCQUFjLENBd0RIO0FBdkRsQixzRUFBK0Q7QUF5QjNELDhCQXpCRyw2QkFBbUIsQ0F5Qkg7QUF4QnZCLDREQUFxRDtBQXFEakQseUJBckRHLHdCQUFjLENBcURIO0FBcERsQix3REFBaUQ7QUFpRDdDLHVCQWpERyxzQkFBWSxDQWlESDtBQWhEaEIsc0RBQStDO0FBa0QzQyxzQkFsREcscUJBQVcsQ0FrREg7QUFqRGYsd0VBQWlFO0FBa0M3RCwrQkFsQ0csOEJBQW9CLENBa0NIO0FBakN4Qix3REFBaUQ7QUErQzdDLHVCQS9DRyxzQkFBWSxDQStDSDtBQTlDaEIsb0RBQTJDO0FBcUR2QyxpQkFyREksbUJBQU0sQ0FxREo7QUFwRFYsb0RBQTZDO0FBbUR6QyxxQkFuREcsb0JBQVUsQ0FtREg7QUFsRGQsOERBQXVEO0FBbUNuRCwwQkFuQ0cseUJBQWUsQ0FtQ0g7QUFqQ25CLDREQUF5RDtBQXVDckQseUJBdkNLLCtCQUFjLENBdUNMO0FBdENsQix3REFBaUQ7QUF1QzdDLHVCQXZDRyxzQkFBWSxDQXVDSDtBQXRDaEIsNERBQXFEO0FBb0NqRCx5QkFwQ0csd0JBQWMsQ0FvQ0g7QUFuQ2xCLHdEQUFpRDtBQWE3Qyx1QkFiRyxzQkFBWSxDQWFIO0FBWmhCLGtFQUEyRDtBQTJCdkQsNEJBM0JHLDJCQUFpQixDQTJCSDtBQTFCckIsc0RBQStDO0FBZ0MzQyxzQkFoQ0cscUJBQVcsQ0FnQ0g7QUE5QmYsdUNBQWdDO0FBeUI1QixrQkF6QkcsaUJBQU8sQ0F5Qkg7QUF4QlgsMkRBQW9EO0FBNEJoRCx5QkE1Qkcsd0JBQWMsQ0E0Qkg7QUEzQmxCLHlEQUFrRDtBQTBCOUMsd0JBMUJHLHVCQUFhLENBMEJIO0FBekJqQixpREFBMEM7QUF3QnRDLG9CQXhCRyxtQkFBUyxDQXdCSDtBQXRCYix5Q0FBMEM7QUFjdEMsZUFkSyxlQUFJLENBY0w7QUFESixpQkFiVyxpQkFBTSxDQWFYIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENsdXN0ZXJXUyBmcm9tICdjbHVzdGVyd3MnO1xuaW1wb3J0IHsgYnVpbGRQcm92aWRlck1vZHVsZSB9IGZyb20gJ2ludmVyc2lmeS1iaW5kaW5nLWRlY29yYXRvcnMnO1xuaW1wb3J0IHtcbiAgICBhbGwsXG4gICAgY29udHJvbGxlciwgY29va2llcywgaHR0cERlbGV0ZSwgaHR0cEdldCwgaHR0cEhlYWQsIGh0dHBNZXRob2QsIGh0dHBQYXRjaCwgaHR0cFBvc3QsIGh0dHBQdXQsXG4gICAgSW52ZXJzaWZ5S29hU2VydmVyLCBuZXh0LCBxdWVyeVBhcmFtLCByZXF1ZXN0LCByZXF1ZXN0Qm9keSxcbiAgICByZXF1ZXN0SGVhZGVycywgcmVxdWVzdFBhcmFtLCByZXNwb25zZSwgVFlQRVxufSBmcm9tICdpbnZlcnNpZnkta29hLXV0aWxzJztcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSAna29hLWJvZHlwYXJzZXInO1xuaW1wb3J0ICogYXMgand0IGZyb20gJ2tvYS1qd3QnO1xuaW1wb3J0ICogYXMgbG9nNGpzIGZyb20gJ2tvYS1sb2c0JztcbmltcG9ydCB2YWxpZGF0ZSBmcm9tICdrb2EtcmVxLXZhbGlkYXRvcic7XG5pbXBvcnQgKiBhcyBSb3V0ZXIgZnJvbSAna29hLXJvdXRlcic7XG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gJ2tvYTItY29ycyc7XG5pbXBvcnQgeyBCYXNlQ29uc3RhbnQgfSBmcm9tICcuL2NvbmZpZy9CYXNlQ29uc3RhbnQnO1xuaW1wb3J0IHsgQmFzZUh0dHBTdGF0dXNDb2RlIH0gZnJvbSAnLi9jb25maWcvQmFzZUh0dHBTdGF0dXNDb2RlJztcbmltcG9ydCB7IFNRTFNlcnZlclR5cGUgfSBmcm9tICcuL2NvbmZpZy9lbnVtLlNRTFNlcnZlclR5cGUnO1xuaW1wb3J0IEdTZXJ2ZXIgZnJvbSAnLi9HU2VydmVyJztcbmltcG9ydCB7IGF1dG9Qcm92aWRlLCBjb250YWluZXIsIGluamVjdCwgcHJvdmlkZSwgcHJvdmlkZU5hbWVkIH0gZnJvbSAnLi9pb2MvaW9jJztcbmltcG9ydCBJb2NUcmFjZXIgZnJvbSAnLi9pb2MvaW9jVHJhY2VyJztcbmltcG9ydCB7IE9STUNvbnRleHQgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgQW55RW50aXR5IGZyb20gJy4vbW9kZWxzL0FueUVudGl0eSc7XG5pbXBvcnQgQmFzZUNvbnRyb2xsZXIgZnJvbSAnLi9tb2RlbHMvQmFzZUNvbnRyb2xsZXInO1xuaW1wb3J0IEJhc2VFbnRpdHkgZnJvbSAnLi9tb2RlbHMvQmFzZUVudGl0eSc7XG5pbXBvcnQgQmFzZUV4Y2VwdGlvbnMgZnJvbSAnLi9tb2RlbHMvQmFzZUV4Y2VwdGlvbnMnO1xuaW1wb3J0IEJhc2VSZWRpc0hhc2habnRpdHkgZnJvbSAnLi9tb2RlbHMvQmFzZVJlZGlzSGFzaFpudGl0eSc7XG5pbXBvcnQgQmFzZVJlcG9zaXRvcnkgZnJvbSAnLi9tb2RlbHMvQmFzZVJlcG9zaXRvcnknO1xuaW1wb3J0IEJhc2VSZXNwb25zZSBmcm9tICcuL21vZGVscy9CYXNlUmVzcG9uc2UnO1xuaW1wb3J0IEJhc2VTZXJ2aWNlIGZyb20gJy4vbW9kZWxzL0Jhc2VTZXJ2aWNlJztcbmltcG9ydCBCYXNlU29ja2V0Q29udHJvbGxlciBmcm9tICcuL21vZGVscy9CYXNlU29ja2V0Q29udHJvbGxlcic7XG5pbXBvcnQgQmFzZVVzZXJJbmZvIGZyb20gJy4vbW9kZWxzL0Jhc2VVc2VySW5mbyc7XG5pbXBvcnQge0VudGl0eX0gZnJvbSAnLi9tb2RlbHMvRGVjb3JhdG9ycyc7XG5pbXBvcnQgRG9jQ2hhbmdlZCBmcm9tICcuL21vZGVscy9Eb2NDaGFuZ2VkJztcbmltcG9ydCBIdHRwSW5pdFNldHRpbmcgZnJvbSAnLi9tb2RlbHMvSHR0cEluaXRTZXR0aW5nJztcbmltcG9ydCBJQmFzZUNvbnRleHQgZnJvbSAnLi9tb2RlbHMvSUJhc2VDb250ZXh0JztcbmltcG9ydCB7IExpYnNFeGNlcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMvTGlic0V4Y2VwdGlvbnMnO1xuaW1wb3J0IE15c3FsQ29udGV4dCBmcm9tICcuL21vZGVscy9NeVNxbENvbnRleHQnO1xuaW1wb3J0IE5vdEltcGxlbWVudGVkIGZyb20gJy4vbW9kZWxzL05vdEltcGxlbWVudGVkJztcbmltcG9ydCBSZWRpc0NvbnRleHQgZnJvbSAnLi9tb2RlbHMvUmVkaXNDb250ZXh0JztcbmltcG9ydCBTb2NrZXRJbml0U2V0dGluZyBmcm9tICcuL21vZGVscy9Tb2NrZXRJbml0U2V0dGluZyc7XG5pbXBvcnQgVHJhbnNhY3Rpb24gZnJvbSAnLi9tb2RlbHMvVHJhbnNhY3Rpb24nO1xuaW1wb3J0IElTZXJ2ZXJJbml0T25jZUV2ZW50IGZyb20gJy4vU2VydmVyRXZlbnQvU2VydmVySW5pdE9uY2VFdmVudCc7XG5pbXBvcnQgU1NlcnZlciBmcm9tICcuL1NTZXJ2ZXInO1xuaW1wb3J0IEJhc2VEYXRhSGVscGVyIGZyb20gJy4vdXRpbHMvQmFzZURhdGFIZWxwZXInO1xuaW1wb3J0IEJhc2VTUUxIZWxwZXIgZnJvbSAnLi91dGlscy9CYXNlU1FMSGVscGVyJztcbmltcG9ydCBCYXNlVXRpbHMgZnJvbSAnLi91dGlscy9CYXNlVXRpbHMnO1xuaW1wb3J0IHsgSVF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vdXRpbHMvRGFvT3BlcmF0b3InO1xuaW1wb3J0IHsgSW5pdCwgV29ya2VyIH0gZnJvbSAnLi9XU1NlcnZlcic7XG5cbmV4cG9ydCB7XG4gICAgQmFzZVJlZGlzSGFzaFpudGl0eSxcbiAgICBSZWRpc0NvbnRleHQsXG4gICAgSW9jVHJhY2VyLFxuICAgIGNvcnMsXG4gICAgUm91dGVyLFxuICAgIGxvZzRqcyxcbiAgICBqd3QsXG4gICAgYm9keVBhcnNlcixcbiAgICBJbnZlcnNpZnlLb2FTZXJ2ZXIsXG4gICAgYnVpbGRQcm92aWRlck1vZHVsZSxcbiAgICBXb3JrZXIsXG4gICAgSW5pdCxcbiAgICBDbHVzdGVyV1MgYXMgV1NTZXJ2ZXIsXG4gICAgQmFzZVNvY2tldENvbnRyb2xsZXIsXG4gICAgSVNlcnZlckluaXRPbmNlRXZlbnQsXG4gICAgR1NlcnZlcixcbiAgICBTb2NrZXRJbml0U2V0dGluZyxcbiAgICBTU2VydmVyLFxuICAgIEh0dHBJbml0U2V0dGluZyxcbiAgICBCYXNlVXRpbHMsXG4gICAgQmFzZVNRTEhlbHBlcixcbiAgICBCYXNlRGF0YUhlbHBlcixcbiAgICBUcmFuc2FjdGlvbixcbiAgICBOb3RJbXBsZW1lbnRlZCxcbiAgICBMaWJzRXhjZXB0aW9ucyxcbiAgICBNeXNxbENvbnRleHQsXG4gICAgQmFzZVJlc3BvbnNlLFxuICAgIEJhc2VVc2VySW5mbyxcbiAgICBCYXNlU2VydmljZSxcbiAgICBCYXNlUmVwb3NpdG9yeSxcbiAgICBCYXNlRXhjZXB0aW9ucyxcbiAgICBCYXNlRW50aXR5LFxuICAgIEJhc2VDb250cm9sbGVyLFxuICAgIERvY0NoYW5nZWQsXG4gICAgRW50aXR5LFxuICAgIEFueUVudGl0eSxcbiAgICBCYXNlSHR0cFN0YXR1c0NvZGUsXG4gICAgQmFzZUNvbnN0YW50LFxuICAgIFNRTFNlcnZlclR5cGUsXG4gICAgSUJhc2VDb250ZXh0LFxuICAgIElRdWVyeU9wdGlvbnMsXG4gICAgY29udGFpbmVyLFxuICAgIGF1dG9Qcm92aWRlLFxuICAgIHByb3ZpZGUsXG4gICAgcHJvdmlkZU5hbWVkLFxuICAgIGluamVjdCxcbiAgICBjb250cm9sbGVyLFxuICAgIGh0dHBQb3N0LFxuICAgIGh0dHBQdXQsXG4gICAgVFlQRSxcbiAgICB2YWxpZGF0ZSxcbiAgICBodHRwR2V0LFxuICAgIGh0dHBNZXRob2QsXG4gICAgaHR0cFBhdGNoLFxuICAgIGh0dHBIZWFkLFxuICAgIGFsbCxcbiAgICBodHRwRGVsZXRlLFxuICAgIHJlcXVlc3QsXG4gICAgcmVzcG9uc2UsXG4gICAgcmVxdWVzdFBhcmFtLFxuICAgIHF1ZXJ5UGFyYW0sXG4gICAgcmVxdWVzdEJvZHksXG4gICAgcmVxdWVzdEhlYWRlcnMsXG4gICAgY29va2llcyxcbiAgICBuZXh0XG59O1xuIl19