"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const clusterws_1 = require("clusterws");
exports.WSServer = clusterws_1.default;
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
exports.buildProviderModule = inversify_binding_decorators_1.buildProviderModule;
const inversify_koa_utils_1 = require("inversify-koa-utils");
exports.all = inversify_koa_utils_1.all;
exports.controller = inversify_koa_utils_1.controller;
exports.cookies = inversify_koa_utils_1.cookies;
exports.httpDelete = inversify_koa_utils_1.httpDelete;
exports.httpGet = inversify_koa_utils_1.httpGet;
exports.httpHead = inversify_koa_utils_1.httpHead;
exports.httpMethod = inversify_koa_utils_1.httpMethod;
exports.httpPatch = inversify_koa_utils_1.httpPatch;
exports.httpPost = inversify_koa_utils_1.httpPost;
exports.httpPut = inversify_koa_utils_1.httpPut;
exports.InversifyKoaServer = inversify_koa_utils_1.InversifyKoaServer;
exports.next = inversify_koa_utils_1.next;
exports.queryParam = inversify_koa_utils_1.queryParam;
exports.request = inversify_koa_utils_1.request;
exports.requestBody = inversify_koa_utils_1.requestBody;
exports.requestHeaders = inversify_koa_utils_1.requestHeaders;
exports.requestParam = inversify_koa_utils_1.requestParam;
exports.response = inversify_koa_utils_1.response;
exports.TYPE = inversify_koa_utils_1.TYPE;
const bodyParser = require("koa-bodyparser");
exports.bodyParser = bodyParser;
const jwt = require("koa-jwt");
exports.jwt = jwt;
const log4js = require("koa-log4");
exports.log4js = log4js;
const koa_req_validator_1 = require("koa-req-validator");
exports.validate = koa_req_validator_1.default;
const Router = require("koa-router");
exports.Router = Router;
const cors = require("koa2-cors");
exports.cors = cors;
const BaseConstant_1 = require("./config/BaseConstant");
exports.BaseConstant = BaseConstant_1.BaseConstant;
const BaseHttpStatusCode_1 = require("./config/BaseHttpStatusCode");
exports.BaseHttpStatusCode = BaseHttpStatusCode_1.BaseHttpStatusCode;
const enum_SQLServerType_1 = require("./config/enum.SQLServerType");
exports.SQLServerType = enum_SQLServerType_1.SQLServerType;
const GServer_1 = require("./GServer");
exports.GServer = GServer_1.default;
const ioc_1 = require("./ioc/ioc");
exports.autoProvide = ioc_1.autoProvide;
exports.container = ioc_1.container;
exports.inject = ioc_1.inject;
exports.provide = ioc_1.provide;
exports.provideNamed = ioc_1.provideNamed;
const iocTracer_1 = require("./ioc/iocTracer");
exports.IocTracer = iocTracer_1.default;
const AnyEntity_1 = require("./models/AnyEntity");
exports.AnyEntity = AnyEntity_1.default;
const BaseController_1 = require("./models/BaseController");
exports.BaseController = BaseController_1.default;
const BaseEntity_1 = require("./models/BaseEntity");
exports.BaseEntity = BaseEntity_1.default;
const BaseExceptions_1 = require("./models/BaseExceptions");
exports.BaseExceptions = BaseExceptions_1.default;
const BaseRepository_1 = require("./models/BaseRepository");
exports.BaseRepository = BaseRepository_1.default;
const BaseResponse_1 = require("./models/BaseResponse");
exports.BaseResponse = BaseResponse_1.default;
const BaseService_1 = require("./models/BaseService");
exports.BaseService = BaseService_1.default;
const BaseSocketController_1 = require("./models/BaseSocketController");
exports.BaseSocketController = BaseSocketController_1.default;
const BaseUserInfo_1 = require("./models/BaseUserInfo");
exports.BaseUserInfo = BaseUserInfo_1.default;
const Decorators_1 = require("./models/Decorators");
exports.Entity = Decorators_1.Entity;
const DocChanged_1 = require("./models/DocChanged");
exports.DocChanged = DocChanged_1.default;
const HttpInitSetting_1 = require("./models/HttpInitSetting");
exports.HttpInitSetting = HttpInitSetting_1.default;
const LibsExceptions_1 = require("./models/LibsExceptions");
exports.LibsExceptions = LibsExceptions_1.LibsExceptions;
const MySqlContext_1 = require("./models/MySqlContext");
exports.MysqlContext = MySqlContext_1.default;
const NotImplemented_1 = require("./models/NotImplemented");
exports.NotImplemented = NotImplemented_1.default;
const RedisContext_1 = require("./models/RedisContext");
exports.RedisContext = RedisContext_1.default;
const SocketInitSetting_1 = require("./models/SocketInitSetting");
exports.SocketInitSetting = SocketInitSetting_1.default;
const Transaction_1 = require("./models/Transaction");
exports.Transaction = Transaction_1.default;
const SServer_1 = require("./SServer");
exports.SServer = SServer_1.default;
const BaseDataHelper_1 = require("./utils/BaseDataHelper");
exports.BaseDataHelper = BaseDataHelper_1.default;
const BaseSQLHelper_1 = require("./utils/BaseSQLHelper");
exports.BaseSQLHelper = BaseSQLHelper_1.default;
const BaseUtils_1 = require("./utils/BaseUtils");
exports.BaseUtils = BaseUtils_1.default;
const WSServer_1 = require("./WSServer");
exports.Init = WSServer_1.Init;
exports.Worker = WSServer_1.Worker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFrQztBQTREakIsbUJBNURWLG1CQUFTLENBNERTO0FBM0R6QiwrRUFBbUU7QUF3RC9ELDhCQXhESyxrREFBbUIsQ0F3REw7QUF2RHZCLDZEQUs2QjtBQWdHekIsY0FwR0EseUJBQUcsQ0FvR0E7QUFUSCxxQkExRkEsZ0NBQVUsQ0EwRkE7QUFpQlYsa0JBM0dZLDZCQUFPLENBMkdaO0FBUFAscUJBcEdxQixnQ0FBVSxDQW9HckI7QUFMVixrQkEvRmlDLDZCQUFPLENBK0ZqQztBQUdQLG1CQWxHMEMsOEJBQVEsQ0FrRzFDO0FBRlIscUJBaEdvRCxnQ0FBVSxDQWdHcEQ7QUFDVixvQkFqR2dFLCtCQUFTLENBaUdoRTtBQU5ULG1CQTNGMkUsOEJBQVEsQ0EyRjNFO0FBQ1Isa0JBNUZxRiw2QkFBTyxDQTRGckY7QUF4Q1AsNkJBbkRBLHdDQUFrQixDQW1EQTtBQXdEbEIsZUEzR29CLDBCQUFJLENBMkdwQjtBQUpKLHFCQXZHMEIsZ0NBQVUsQ0F1RzFCO0FBSFYsa0JBcEdzQyw2QkFBTyxDQW9HdEM7QUFJUCxzQkF4RytDLGlDQUFXLENBd0cvQztBQUNYLHlCQXhHQSxvQ0FBYyxDQXdHQTtBQUhkLHVCQXJHZ0Isa0NBQVksQ0FxR2hCO0FBRFosbUJBcEc4Qiw4QkFBUSxDQW9HOUI7QUFUUixlQTNGd0MsMEJBQUksQ0EyRnhDO0FBekZSLDZDQUE2QztBQStDekMsZ0NBQVU7QUE5Q2QsK0JBQStCO0FBNkMzQixrQkFBRztBQTVDUCxtQ0FBbUM7QUEyQy9CLHdCQUFNO0FBMUNWLHlEQUF5QztBQXVGckMsbUJBdkZHLDJCQUFRLENBdUZIO0FBdEZaLHFDQUFxQztBQXdDakMsd0JBQU07QUF2Q1Ysa0NBQWtDO0FBc0M5QixvQkFBSTtBQXJDUix3REFBcUQ7QUF1RWpELHVCQXZFSywyQkFBWSxDQXVFTDtBQXRFaEIsb0VBQWlFO0FBcUU3RCw2QkFyRUssdUNBQWtCLENBcUVMO0FBcEV0QixvRUFBNEQ7QUFzRXhELHdCQXRFSyxrQ0FBYSxDQXNFTDtBQXJFakIsdUNBQWdDO0FBOEM1QixrQkE5Q0csaUJBQU8sQ0E4Q0g7QUE3Q1gsbUNBQWtGO0FBd0U5RSxzQkF4RUssaUJBQVcsQ0F3RUw7QUFEWCxvQkF2RWtCLGVBQVMsQ0F1RWxCO0FBSVQsaUJBM0U2QixZQUFNLENBMkU3QjtBQUZOLGtCQXpFcUMsYUFBTyxDQXlFckM7QUFDUCx1QkExRThDLGtCQUFZLENBMEU5QztBQXpFaEIsK0NBQXdDO0FBK0JwQyxvQkEvQkcsbUJBQVMsQ0ErQkg7QUE3QmIsa0RBQTJDO0FBOER2QyxvQkE5REcsbUJBQVMsQ0E4REg7QUE3RGIsNERBQXFEO0FBMERqRCx5QkExREcsd0JBQWMsQ0EwREg7QUF6RGxCLG9EQUE2QztBQXdEekMscUJBeERHLG9CQUFVLENBd0RIO0FBdkRkLDREQUFxRDtBQXNEakQseUJBdERHLHdCQUFjLENBc0RIO0FBckRsQiw0REFBcUQ7QUFvRGpELHlCQXBERyx3QkFBYyxDQW9ESDtBQW5EbEIsd0RBQWlEO0FBZ0Q3Qyx1QkFoREcsc0JBQVksQ0FnREg7QUEvQ2hCLHNEQUErQztBQWlEM0Msc0JBakRHLHFCQUFXLENBaURIO0FBaERmLHdFQUFpRTtBQWlDN0QsK0JBakNHLDhCQUFvQixDQWlDSDtBQWhDeEIsd0RBQWlEO0FBOEM3Qyx1QkE5Q0csc0JBQVksQ0E4Q0g7QUE3Q2hCLG9EQUEyQztBQW9EdkMsaUJBcERJLG1CQUFNLENBb0RKO0FBbkRWLG9EQUE2QztBQWtEekMscUJBbERHLG9CQUFVLENBa0RIO0FBakRkLDhEQUF1RDtBQWtDbkQsMEJBbENHLHlCQUFlLENBa0NIO0FBaENuQiw0REFBeUQ7QUFzQ3JELHlCQXRDSywrQkFBYyxDQXNDTDtBQXJDbEIsd0RBQWlEO0FBc0M3Qyx1QkF0Q0csc0JBQVksQ0FzQ0g7QUFyQ2hCLDREQUFxRDtBQW1DakQseUJBbkNHLHdCQUFjLENBbUNIO0FBbENsQix3REFBaUQ7QUFZN0MsdUJBWkcsc0JBQVksQ0FZSDtBQVhoQixrRUFBMkQ7QUEwQnZELDRCQTFCRywyQkFBaUIsQ0EwQkg7QUF6QnJCLHNEQUErQztBQStCM0Msc0JBL0JHLHFCQUFXLENBK0JIO0FBN0JmLHVDQUFnQztBQXdCNUIsa0JBeEJHLGlCQUFPLENBd0JIO0FBdkJYLDJEQUFvRDtBQTJCaEQseUJBM0JHLHdCQUFjLENBMkJIO0FBMUJsQix5REFBa0Q7QUF5QjlDLHdCQXpCRyx1QkFBYSxDQXlCSDtBQXhCakIsaURBQTBDO0FBdUJ0QyxvQkF2QkcsbUJBQVMsQ0F1Qkg7QUFyQmIseUNBQTBDO0FBYXRDLGVBYkssZUFBSSxDQWFMO0FBREosaUJBWlcsaUJBQU0sQ0FZWCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbHVzdGVyV1MgZnJvbSAnY2x1c3RlcndzJztcbmltcG9ydCB7IGJ1aWxkUHJvdmlkZXJNb2R1bGUgfSBmcm9tICdpbnZlcnNpZnktYmluZGluZy1kZWNvcmF0b3JzJztcbmltcG9ydCB7XG4gICAgYWxsLFxuICAgIGNvbnRyb2xsZXIsIGNvb2tpZXMsIGh0dHBEZWxldGUsIGh0dHBHZXQsIGh0dHBIZWFkLCBodHRwTWV0aG9kLCBodHRwUGF0Y2gsIGh0dHBQb3N0LCBodHRwUHV0LFxuICAgIEludmVyc2lmeUtvYVNlcnZlciwgbmV4dCwgcXVlcnlQYXJhbSwgcmVxdWVzdCwgcmVxdWVzdEJvZHksXG4gICAgcmVxdWVzdEhlYWRlcnMsIHJlcXVlc3RQYXJhbSwgcmVzcG9uc2UsIFRZUEVcbn0gZnJvbSAnaW52ZXJzaWZ5LWtvYS11dGlscyc7XG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gJ2tvYS1ib2R5cGFyc2VyJztcbmltcG9ydCAqIGFzIGp3dCBmcm9tICdrb2Etand0JztcbmltcG9ydCAqIGFzIGxvZzRqcyBmcm9tICdrb2EtbG9nNCc7XG5pbXBvcnQgdmFsaWRhdGUgZnJvbSAna29hLXJlcS12YWxpZGF0b3InO1xuaW1wb3J0ICogYXMgUm91dGVyIGZyb20gJ2tvYS1yb3V0ZXInO1xuaW1wb3J0ICogYXMgY29ycyBmcm9tICdrb2EyLWNvcnMnO1xuaW1wb3J0IHsgQmFzZUNvbnN0YW50IH0gZnJvbSAnLi9jb25maWcvQmFzZUNvbnN0YW50JztcbmltcG9ydCB7IEJhc2VIdHRwU3RhdHVzQ29kZSB9IGZyb20gJy4vY29uZmlnL0Jhc2VIdHRwU3RhdHVzQ29kZSc7XG5pbXBvcnQgeyBTUUxTZXJ2ZXJUeXBlIH0gZnJvbSAnLi9jb25maWcvZW51bS5TUUxTZXJ2ZXJUeXBlJztcbmltcG9ydCBHU2VydmVyIGZyb20gJy4vR1NlcnZlcic7XG5pbXBvcnQgeyBhdXRvUHJvdmlkZSwgY29udGFpbmVyLCBpbmplY3QsIHByb3ZpZGUsIHByb3ZpZGVOYW1lZCB9IGZyb20gJy4vaW9jL2lvYyc7XG5pbXBvcnQgSW9jVHJhY2VyIGZyb20gJy4vaW9jL2lvY1RyYWNlcic7XG5pbXBvcnQgeyBPUk1Db250ZXh0IH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IEFueUVudGl0eSBmcm9tICcuL21vZGVscy9BbnlFbnRpdHknO1xuaW1wb3J0IEJhc2VDb250cm9sbGVyIGZyb20gJy4vbW9kZWxzL0Jhc2VDb250cm9sbGVyJztcbmltcG9ydCBCYXNlRW50aXR5IGZyb20gJy4vbW9kZWxzL0Jhc2VFbnRpdHknO1xuaW1wb3J0IEJhc2VFeGNlcHRpb25zIGZyb20gJy4vbW9kZWxzL0Jhc2VFeGNlcHRpb25zJztcbmltcG9ydCBCYXNlUmVwb3NpdG9yeSBmcm9tICcuL21vZGVscy9CYXNlUmVwb3NpdG9yeSc7XG5pbXBvcnQgQmFzZVJlc3BvbnNlIGZyb20gJy4vbW9kZWxzL0Jhc2VSZXNwb25zZSc7XG5pbXBvcnQgQmFzZVNlcnZpY2UgZnJvbSAnLi9tb2RlbHMvQmFzZVNlcnZpY2UnO1xuaW1wb3J0IEJhc2VTb2NrZXRDb250cm9sbGVyIGZyb20gJy4vbW9kZWxzL0Jhc2VTb2NrZXRDb250cm9sbGVyJztcbmltcG9ydCBCYXNlVXNlckluZm8gZnJvbSAnLi9tb2RlbHMvQmFzZVVzZXJJbmZvJztcbmltcG9ydCB7RW50aXR5fSBmcm9tICcuL21vZGVscy9EZWNvcmF0b3JzJztcbmltcG9ydCBEb2NDaGFuZ2VkIGZyb20gJy4vbW9kZWxzL0RvY0NoYW5nZWQnO1xuaW1wb3J0IEh0dHBJbml0U2V0dGluZyBmcm9tICcuL21vZGVscy9IdHRwSW5pdFNldHRpbmcnO1xuaW1wb3J0IElCYXNlQ29udGV4dCBmcm9tICcuL21vZGVscy9JQmFzZUNvbnRleHQnO1xuaW1wb3J0IHsgTGlic0V4Y2VwdGlvbnMgfSBmcm9tICcuL21vZGVscy9MaWJzRXhjZXB0aW9ucyc7XG5pbXBvcnQgTXlzcWxDb250ZXh0IGZyb20gJy4vbW9kZWxzL015U3FsQ29udGV4dCc7XG5pbXBvcnQgTm90SW1wbGVtZW50ZWQgZnJvbSAnLi9tb2RlbHMvTm90SW1wbGVtZW50ZWQnO1xuaW1wb3J0IFJlZGlzQ29udGV4dCBmcm9tICcuL21vZGVscy9SZWRpc0NvbnRleHQnO1xuaW1wb3J0IFNvY2tldEluaXRTZXR0aW5nIGZyb20gJy4vbW9kZWxzL1NvY2tldEluaXRTZXR0aW5nJztcbmltcG9ydCBUcmFuc2FjdGlvbiBmcm9tICcuL21vZGVscy9UcmFuc2FjdGlvbic7XG5pbXBvcnQgSVNlcnZlckluaXRPbmNlRXZlbnQgZnJvbSAnLi9TZXJ2ZXJFdmVudC9TZXJ2ZXJJbml0T25jZUV2ZW50JztcbmltcG9ydCBTU2VydmVyIGZyb20gJy4vU1NlcnZlcic7XG5pbXBvcnQgQmFzZURhdGFIZWxwZXIgZnJvbSAnLi91dGlscy9CYXNlRGF0YUhlbHBlcic7XG5pbXBvcnQgQmFzZVNRTEhlbHBlciBmcm9tICcuL3V0aWxzL0Jhc2VTUUxIZWxwZXInO1xuaW1wb3J0IEJhc2VVdGlscyBmcm9tICcuL3V0aWxzL0Jhc2VVdGlscyc7XG5pbXBvcnQgeyBJUXVlcnlPcHRpb25zIH0gZnJvbSAnLi91dGlscy9EYW9PcGVyYXRvcic7XG5pbXBvcnQgeyBJbml0LCBXb3JrZXIgfSBmcm9tICcuL1dTU2VydmVyJztcblxuZXhwb3J0IHtcbiAgICBSZWRpc0NvbnRleHQsXG4gICAgSW9jVHJhY2VyLFxuICAgIGNvcnMsXG4gICAgUm91dGVyLFxuICAgIGxvZzRqcyxcbiAgICBqd3QsXG4gICAgYm9keVBhcnNlcixcbiAgICBJbnZlcnNpZnlLb2FTZXJ2ZXIsXG4gICAgYnVpbGRQcm92aWRlck1vZHVsZSxcbiAgICBXb3JrZXIsXG4gICAgSW5pdCxcbiAgICBDbHVzdGVyV1MgYXMgV1NTZXJ2ZXIsXG4gICAgQmFzZVNvY2tldENvbnRyb2xsZXIsXG4gICAgSVNlcnZlckluaXRPbmNlRXZlbnQsXG4gICAgR1NlcnZlcixcbiAgICBTb2NrZXRJbml0U2V0dGluZyxcbiAgICBTU2VydmVyLFxuICAgIEh0dHBJbml0U2V0dGluZyxcbiAgICBCYXNlVXRpbHMsXG4gICAgQmFzZVNRTEhlbHBlcixcbiAgICBCYXNlRGF0YUhlbHBlcixcbiAgICBUcmFuc2FjdGlvbixcbiAgICBOb3RJbXBsZW1lbnRlZCxcbiAgICBMaWJzRXhjZXB0aW9ucyxcbiAgICBNeXNxbENvbnRleHQsXG4gICAgQmFzZVJlc3BvbnNlLFxuICAgIEJhc2VVc2VySW5mbyxcbiAgICBCYXNlU2VydmljZSxcbiAgICBCYXNlUmVwb3NpdG9yeSxcbiAgICBCYXNlRXhjZXB0aW9ucyxcbiAgICBCYXNlRW50aXR5LFxuICAgIEJhc2VDb250cm9sbGVyLFxuICAgIERvY0NoYW5nZWQsXG4gICAgRW50aXR5LFxuICAgIEFueUVudGl0eSxcbiAgICBCYXNlSHR0cFN0YXR1c0NvZGUsXG4gICAgQmFzZUNvbnN0YW50LFxuICAgIFNRTFNlcnZlclR5cGUsXG4gICAgSUJhc2VDb250ZXh0LFxuICAgIElRdWVyeU9wdGlvbnMsXG4gICAgY29udGFpbmVyLFxuICAgIGF1dG9Qcm92aWRlLFxuICAgIHByb3ZpZGUsXG4gICAgcHJvdmlkZU5hbWVkLFxuICAgIGluamVjdCxcbiAgICBjb250cm9sbGVyLFxuICAgIGh0dHBQb3N0LFxuICAgIGh0dHBQdXQsXG4gICAgVFlQRSxcbiAgICB2YWxpZGF0ZSxcbiAgICBodHRwR2V0LFxuICAgIGh0dHBNZXRob2QsXG4gICAgaHR0cFBhdGNoLFxuICAgIGh0dHBIZWFkLFxuICAgIGFsbCxcbiAgICBodHRwRGVsZXRlLFxuICAgIHJlcXVlc3QsXG4gICAgcmVzcG9uc2UsXG4gICAgcmVxdWVzdFBhcmFtLFxuICAgIHF1ZXJ5UGFyYW0sXG4gICAgcmVxdWVzdEJvZHksXG4gICAgcmVxdWVzdEhlYWRlcnMsXG4gICAgY29va2llcyxcbiAgICBuZXh0XG59O1xuIl19