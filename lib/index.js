"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const clusterws_1 = require("clusterws");
exports.WSServer = clusterws_1.default;
const inversify_binding_decorators_1 = require("inversify-binding-decorators");
exports.buildProviderModule = inversify_binding_decorators_1.buildProviderModule;
const inversify_koa_utils_1 = require("inversify-koa-utils");
exports.all = inversify_koa_utils_1.all;
exports.controller = inversify_koa_utils_1.controller;
exports.cookies = inversify_koa_utils_1.cookies;
exports.httpDelete = inversify_koa_utils_1.httpDelete;
exports.httpGet = inversify_koa_utils_1.httpGet;
exports.httpHead = inversify_koa_utils_1.httpHead;
exports.httpMethod = inversify_koa_utils_1.httpMethod;
exports.httpPatch = inversify_koa_utils_1.httpPatch;
exports.httpPost = inversify_koa_utils_1.httpPost;
exports.httpPut = inversify_koa_utils_1.httpPut;
exports.InversifyKoaServer = inversify_koa_utils_1.InversifyKoaServer;
exports.next = inversify_koa_utils_1.next;
exports.queryParam = inversify_koa_utils_1.queryParam;
exports.request = inversify_koa_utils_1.request;
exports.requestBody = inversify_koa_utils_1.requestBody;
exports.requestHeaders = inversify_koa_utils_1.requestHeaders;
exports.requestParam = inversify_koa_utils_1.requestParam;
exports.response = inversify_koa_utils_1.response;
exports.TYPE = inversify_koa_utils_1.TYPE;
const bodyParser = require("koa-bodyparser");
exports.bodyParser = bodyParser;
const jwt = require("koa-jwt");
exports.jwt = jwt;
const log4js = require("koa-log4");
exports.log4js = log4js;
const koa_req_validator_1 = require("koa-req-validator");
exports.validate = koa_req_validator_1.default;
const Router = require("koa-router");
exports.Router = Router;
const cors = require("koa2-cors");
exports.cors = cors;
const BaseConstant_1 = require("./config/BaseConstant");
exports.BaseConstant = BaseConstant_1.BaseConstant;
const BaseHttpStatusCode_1 = require("./config/BaseHttpStatusCode");
exports.BaseHttpStatusCode = BaseHttpStatusCode_1.BaseHttpStatusCode;
const enum_SQLServerType_1 = require("./config/enum.SQLServerType");
exports.SQLServerType = enum_SQLServerType_1.SQLServerType;
const GServer_1 = require("./GServer");
exports.GServer = GServer_1.default;
const ioc_1 = require("./ioc/ioc");
exports.autoProvide = ioc_1.autoProvide;
exports.container = ioc_1.container;
exports.inject = ioc_1.inject;
exports.provide = ioc_1.provide;
exports.provideNamed = ioc_1.provideNamed;
const iocTracer_1 = require("./ioc/iocTracer");
exports.IocTracer = iocTracer_1.default;
const AnyEntity_1 = require("./models/AnyEntity");
exports.AnyEntity = AnyEntity_1.default;
const BaseController_1 = require("./models/BaseController");
exports.BaseController = BaseController_1.default;
const BaseEntity_1 = require("./models/BaseEntity");
exports.BaseEntity = BaseEntity_1.default;
const BaseExceptions_1 = require("./models/BaseExceptions");
exports.BaseExceptions = BaseExceptions_1.default;
const BaseRedisHashZntity_1 = require("./models/BaseRedisHashZntity");
exports.BaseRedisHashZntity = BaseRedisHashZntity_1.default;
const BaseRepository_1 = require("./models/BaseRepository");
exports.BaseRepository = BaseRepository_1.default;
const BaseResponse_1 = require("./models/BaseResponse");
exports.BaseResponse = BaseResponse_1.default;
const BaseService_1 = require("./models/BaseService");
exports.BaseService = BaseService_1.default;
const BaseSocketController_1 = require("./models/BaseSocketController");
exports.BaseSocketController = BaseSocketController_1.default;
const BaseUserInfo_1 = require("./models/BaseUserInfo");
exports.BaseUserInfo = BaseUserInfo_1.default;
const Decorators_1 = require("./models/Decorators");
exports.Entity = Decorators_1.Entity;
const DocChanged_1 = require("./models/DocChanged");
exports.DocChanged = DocChanged_1.default;
const GHeartbeats_1 = require("./models/GHeartbeats");
exports.GHeartbeats = GHeartbeats_1.default;
const HttpInitSetting_1 = require("./models/HttpInitSetting");
exports.HttpInitSetting = HttpInitSetting_1.default;
const LibsExceptions_1 = require("./models/LibsExceptions");
exports.LibsExceptions = LibsExceptions_1.LibsExceptions;
const MySqlContext_1 = require("./models/MySqlContext");
exports.MysqlContext = MySqlContext_1.default;
const NotImplemented_1 = require("./models/NotImplemented");
exports.NotImplemented = NotImplemented_1.default;
const RedisContext_1 = require("./models/RedisContext");
exports.RedisContext = RedisContext_1.default;
const SocketInitSetting_1 = require("./models/SocketInitSetting");
exports.SocketInitSetting = SocketInitSetting_1.default;
const Transaction_1 = require("./models/Transaction");
exports.Transaction = Transaction_1.default;
const WebSocketContext_1 = require("./models/WebSocketContext");
exports.WebSocketContext = WebSocketContext_1.default;
const SServer_1 = require("./SServer");
exports.SServer = SServer_1.default;
const BaseDataHelper_1 = require("./utils/BaseDataHelper");
exports.BaseDataHelper = BaseDataHelper_1.default;
const BaseSQLHelper_1 = require("./utils/BaseSQLHelper");
exports.BaseSQLHelper = BaseSQLHelper_1.default;
const BaseUtils_1 = require("./utils/BaseUtils");
exports.BaseUtils = BaseUtils_1.default;
const WSServer_1 = require("./WSServer");
exports.Init = WSServer_1.Init;
exports.Worker = WSServer_1.Worker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFrQztBQWlFakIsbUJBakVWLG1CQUFTLENBaUVTO0FBaEV6QiwrRUFBbUU7QUE2RC9ELDhCQTdESyxrREFBbUIsQ0E2REw7QUE1RHZCLDZEQUs2QjtBQXFHekIsY0F6R0EseUJBQUcsQ0F5R0E7QUFUSCxxQkEvRkEsZ0NBQVUsQ0ErRkE7QUFpQlYsa0JBaEhZLDZCQUFPLENBZ0haO0FBUFAscUJBekdxQixnQ0FBVSxDQXlHckI7QUFMVixrQkFwR2lDLDZCQUFPLENBb0dqQztBQUdQLG1CQXZHMEMsOEJBQVEsQ0F1RzFDO0FBRlIscUJBckdvRCxnQ0FBVSxDQXFHcEQ7QUFDVixvQkF0R2dFLCtCQUFTLENBc0doRTtBQU5ULG1CQWhHMkUsOEJBQVEsQ0FnRzNFO0FBQ1Isa0JBakdxRiw2QkFBTyxDQWlHckY7QUF4Q1AsNkJBeERBLHdDQUFrQixDQXdEQTtBQXdEbEIsZUFoSG9CLDBCQUFJLENBZ0hwQjtBQUpKLHFCQTVHMEIsZ0NBQVUsQ0E0RzFCO0FBSFYsa0JBekdzQyw2QkFBTyxDQXlHdEM7QUFJUCxzQkE3RytDLGlDQUFXLENBNkcvQztBQUNYLHlCQTdHQSxvQ0FBYyxDQTZHQTtBQUhkLHVCQTFHZ0Isa0NBQVksQ0EwR2hCO0FBRFosbUJBekc4Qiw4QkFBUSxDQXlHOUI7QUFUUixlQWhHd0MsMEJBQUksQ0FnR3hDO0FBOUZSLDZDQUE2QztBQW9EekMsZ0NBQVU7QUFuRGQsK0JBQStCO0FBa0QzQixrQkFBRztBQWpEUCxtQ0FBbUM7QUFnRC9CLHdCQUFNO0FBL0NWLHlEQUF5QztBQTRGckMsbUJBNUZHLDJCQUFRLENBNEZIO0FBM0ZaLHFDQUFxQztBQTZDakMsd0JBQU07QUE1Q1Ysa0NBQWtDO0FBMkM5QixvQkFBSTtBQTFDUix3REFBcUQ7QUE0RWpELHVCQTVFSywyQkFBWSxDQTRFTDtBQTNFaEIsb0VBQWlFO0FBMEU3RCw2QkExRUssdUNBQWtCLENBMEVMO0FBekV0QixvRUFBNEQ7QUEyRXhELHdCQTNFSyxrQ0FBYSxDQTJFTDtBQTFFakIsdUNBQWdDO0FBbUQ1QixrQkFuREcsaUJBQU8sQ0FtREg7QUFsRFgsbUNBQWtGO0FBNkU5RSxzQkE3RUssaUJBQVcsQ0E2RUw7QUFEWCxvQkE1RWtCLGVBQVMsQ0E0RWxCO0FBSVQsaUJBaEY2QixZQUFNLENBZ0Y3QjtBQUZOLGtCQTlFcUMsYUFBTyxDQThFckM7QUFDUCx1QkEvRThDLGtCQUFZLENBK0U5QztBQTlFaEIsK0NBQXdDO0FBb0NwQyxvQkFwQ0csbUJBQVMsQ0FvQ0g7QUFuQ2Isa0RBQTJDO0FBb0V2QyxvQkFwRUcsbUJBQVMsQ0FvRUg7QUFuRWIsNERBQXFEO0FBZ0VqRCx5QkFoRUcsd0JBQWMsQ0FnRUg7QUEvRGxCLG9EQUE2QztBQThEekMscUJBOURHLG9CQUFVLENBOERIO0FBN0RkLDREQUFxRDtBQTREakQseUJBNURHLHdCQUFjLENBNERIO0FBM0RsQixzRUFBK0Q7QUE2QjNELDhCQTdCRyw2QkFBbUIsQ0E2Qkg7QUE1QnZCLDREQUFxRDtBQXlEakQseUJBekRHLHdCQUFjLENBeURIO0FBeERsQix3REFBaUQ7QUFxRDdDLHVCQXJERyxzQkFBWSxDQXFESDtBQXBEaEIsc0RBQStDO0FBc0QzQyxzQkF0REcscUJBQVcsQ0FzREg7QUFyRGYsd0VBQWlFO0FBc0M3RCwrQkF0Q0csOEJBQW9CLENBc0NIO0FBckN4Qix3REFBaUQ7QUFtRDdDLHVCQW5ERyxzQkFBWSxDQW1ESDtBQWxEaEIsb0RBQTZDO0FBeUR6QyxpQkF6REssbUJBQU0sQ0F5REw7QUF4RFYsb0RBQTZDO0FBdUR6QyxxQkF2REcsb0JBQVUsQ0F1REg7QUF0RGQsc0RBQStDO0FBb0IzQyxzQkFwQkcscUJBQVcsQ0FvQkg7QUFuQmYsOERBQXVEO0FBc0NuRCwwQkF0Q0cseUJBQWUsQ0FzQ0g7QUFwQ25CLDREQUF5RDtBQTBDckQseUJBMUNLLCtCQUFjLENBMENMO0FBekNsQix3REFBaUQ7QUEwQzdDLHVCQTFDRyxzQkFBWSxDQTBDSDtBQXpDaEIsNERBQXFEO0FBdUNqRCx5QkF2Q0csd0JBQWMsQ0F1Q0g7QUF0Q2xCLHdEQUFpRDtBQWdCN0MsdUJBaEJHLHNCQUFZLENBZ0JIO0FBZmhCLGtFQUEyRDtBQThCdkQsNEJBOUJHLDJCQUFpQixDQThCSDtBQTdCckIsc0RBQStDO0FBbUMzQyxzQkFuQ0cscUJBQVcsQ0FtQ0g7QUFsQ2YsZ0VBQXlEO0FBVXJELDJCQVZHLDBCQUFnQixDQVVIO0FBUnBCLHVDQUFnQztBQTJCNUIsa0JBM0JHLGlCQUFPLENBMkJIO0FBMUJYLDJEQUFvRDtBQThCaEQseUJBOUJHLHdCQUFjLENBOEJIO0FBN0JsQix5REFBa0Q7QUE0QjlDLHdCQTVCRyx1QkFBYSxDQTRCSDtBQTNCakIsaURBQTBDO0FBMEJ0QyxvQkExQkcsbUJBQVMsQ0EwQkg7QUF4QmIseUNBQTBDO0FBZ0J0QyxlQWhCSyxlQUFJLENBZ0JMO0FBREosaUJBZlcsaUJBQU0sQ0FlWCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbHVzdGVyV1MgZnJvbSAnY2x1c3RlcndzJztcbmltcG9ydCB7IGJ1aWxkUHJvdmlkZXJNb2R1bGUgfSBmcm9tICdpbnZlcnNpZnktYmluZGluZy1kZWNvcmF0b3JzJztcbmltcG9ydCB7XG4gICAgYWxsLFxuICAgIGNvbnRyb2xsZXIsIGNvb2tpZXMsIGh0dHBEZWxldGUsIGh0dHBHZXQsIGh0dHBIZWFkLCBodHRwTWV0aG9kLCBodHRwUGF0Y2gsIGh0dHBQb3N0LCBodHRwUHV0LFxuICAgIEludmVyc2lmeUtvYVNlcnZlciwgbmV4dCwgcXVlcnlQYXJhbSwgcmVxdWVzdCwgcmVxdWVzdEJvZHksXG4gICAgcmVxdWVzdEhlYWRlcnMsIHJlcXVlc3RQYXJhbSwgcmVzcG9uc2UsIFRZUEVcbn0gZnJvbSAnaW52ZXJzaWZ5LWtvYS11dGlscyc7XG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gJ2tvYS1ib2R5cGFyc2VyJztcbmltcG9ydCAqIGFzIGp3dCBmcm9tICdrb2Etand0JztcbmltcG9ydCAqIGFzIGxvZzRqcyBmcm9tICdrb2EtbG9nNCc7XG5pbXBvcnQgdmFsaWRhdGUgZnJvbSAna29hLXJlcS12YWxpZGF0b3InO1xuaW1wb3J0ICogYXMgUm91dGVyIGZyb20gJ2tvYS1yb3V0ZXInO1xuaW1wb3J0ICogYXMgY29ycyBmcm9tICdrb2EyLWNvcnMnO1xuaW1wb3J0IHsgQmFzZUNvbnN0YW50IH0gZnJvbSAnLi9jb25maWcvQmFzZUNvbnN0YW50JztcbmltcG9ydCB7IEJhc2VIdHRwU3RhdHVzQ29kZSB9IGZyb20gJy4vY29uZmlnL0Jhc2VIdHRwU3RhdHVzQ29kZSc7XG5pbXBvcnQgeyBTUUxTZXJ2ZXJUeXBlIH0gZnJvbSAnLi9jb25maWcvZW51bS5TUUxTZXJ2ZXJUeXBlJztcbmltcG9ydCBHU2VydmVyIGZyb20gJy4vR1NlcnZlcic7XG5pbXBvcnQgeyBhdXRvUHJvdmlkZSwgY29udGFpbmVyLCBpbmplY3QsIHByb3ZpZGUsIHByb3ZpZGVOYW1lZCB9IGZyb20gJy4vaW9jL2lvYyc7XG5pbXBvcnQgSW9jVHJhY2VyIGZyb20gJy4vaW9jL2lvY1RyYWNlcic7XG5pbXBvcnQgQW55RW50aXR5IGZyb20gJy4vbW9kZWxzL0FueUVudGl0eSc7XG5pbXBvcnQgQmFzZUNvbnRyb2xsZXIgZnJvbSAnLi9tb2RlbHMvQmFzZUNvbnRyb2xsZXInO1xuaW1wb3J0IEJhc2VFbnRpdHkgZnJvbSAnLi9tb2RlbHMvQmFzZUVudGl0eSc7XG5pbXBvcnQgQmFzZUV4Y2VwdGlvbnMgZnJvbSAnLi9tb2RlbHMvQmFzZUV4Y2VwdGlvbnMnO1xuaW1wb3J0IEJhc2VSZWRpc0hhc2habnRpdHkgZnJvbSAnLi9tb2RlbHMvQmFzZVJlZGlzSGFzaFpudGl0eSc7XG5pbXBvcnQgQmFzZVJlcG9zaXRvcnkgZnJvbSAnLi9tb2RlbHMvQmFzZVJlcG9zaXRvcnknO1xuaW1wb3J0IEJhc2VSZXNwb25zZSBmcm9tICcuL21vZGVscy9CYXNlUmVzcG9uc2UnO1xuaW1wb3J0IEJhc2VTZXJ2aWNlIGZyb20gJy4vbW9kZWxzL0Jhc2VTZXJ2aWNlJztcbmltcG9ydCBCYXNlU29ja2V0Q29udHJvbGxlciBmcm9tICcuL21vZGVscy9CYXNlU29ja2V0Q29udHJvbGxlcic7XG5pbXBvcnQgQmFzZVVzZXJJbmZvIGZyb20gJy4vbW9kZWxzL0Jhc2VVc2VySW5mbyc7XG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL21vZGVscy9EZWNvcmF0b3JzJztcbmltcG9ydCBEb2NDaGFuZ2VkIGZyb20gJy4vbW9kZWxzL0RvY0NoYW5nZWQnO1xuaW1wb3J0IEdIZWFydGJlYXRzIGZyb20gJy4vbW9kZWxzL0dIZWFydGJlYXRzJztcbmltcG9ydCBIdHRwSW5pdFNldHRpbmcgZnJvbSAnLi9tb2RlbHMvSHR0cEluaXRTZXR0aW5nJztcbmltcG9ydCBJQmFzZUNvbnRleHQgZnJvbSAnLi9tb2RlbHMvSUJhc2VDb250ZXh0JztcbmltcG9ydCB7IExpYnNFeGNlcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMvTGlic0V4Y2VwdGlvbnMnO1xuaW1wb3J0IE15c3FsQ29udGV4dCBmcm9tICcuL21vZGVscy9NeVNxbENvbnRleHQnO1xuaW1wb3J0IE5vdEltcGxlbWVudGVkIGZyb20gJy4vbW9kZWxzL05vdEltcGxlbWVudGVkJztcbmltcG9ydCBSZWRpc0NvbnRleHQgZnJvbSAnLi9tb2RlbHMvUmVkaXNDb250ZXh0JztcbmltcG9ydCBTb2NrZXRJbml0U2V0dGluZyBmcm9tICcuL21vZGVscy9Tb2NrZXRJbml0U2V0dGluZyc7XG5pbXBvcnQgVHJhbnNhY3Rpb24gZnJvbSAnLi9tb2RlbHMvVHJhbnNhY3Rpb24nO1xuaW1wb3J0IFdlYlNvY2tldENvbnRleHQgZnJvbSAnLi9tb2RlbHMvV2ViU29ja2V0Q29udGV4dCc7XG5pbXBvcnQgSVNlcnZlckluaXRPbmNlRXZlbnQgZnJvbSAnLi9TZXJ2ZXJFdmVudC9TZXJ2ZXJJbml0T25jZUV2ZW50JztcbmltcG9ydCBTU2VydmVyIGZyb20gJy4vU1NlcnZlcic7XG5pbXBvcnQgQmFzZURhdGFIZWxwZXIgZnJvbSAnLi91dGlscy9CYXNlRGF0YUhlbHBlcic7XG5pbXBvcnQgQmFzZVNRTEhlbHBlciBmcm9tICcuL3V0aWxzL0Jhc2VTUUxIZWxwZXInO1xuaW1wb3J0IEJhc2VVdGlscyBmcm9tICcuL3V0aWxzL0Jhc2VVdGlscyc7XG5pbXBvcnQgeyBJUXVlcnlPcHRpb25zIH0gZnJvbSAnLi91dGlscy9EYW9PcGVyYXRvcic7XG5pbXBvcnQgeyBJbml0LCBXb3JrZXIgfSBmcm9tICcuL1dTU2VydmVyJztcblxuZXhwb3J0IHtcbiAgICBXZWJTb2NrZXRDb250ZXh0LFxuICAgIEdIZWFydGJlYXRzLFxuICAgIEJhc2VSZWRpc0hhc2habnRpdHksXG4gICAgUmVkaXNDb250ZXh0LFxuICAgIElvY1RyYWNlcixcbiAgICBjb3JzLFxuICAgIFJvdXRlcixcbiAgICBsb2c0anMsXG4gICAgand0LFxuICAgIGJvZHlQYXJzZXIsXG4gICAgSW52ZXJzaWZ5S29hU2VydmVyLFxuICAgIGJ1aWxkUHJvdmlkZXJNb2R1bGUsXG4gICAgV29ya2VyLFxuICAgIEluaXQsXG4gICAgQ2x1c3RlcldTIGFzIFdTU2VydmVyLFxuICAgIEJhc2VTb2NrZXRDb250cm9sbGVyLFxuICAgIElTZXJ2ZXJJbml0T25jZUV2ZW50LFxuICAgIEdTZXJ2ZXIsXG4gICAgU29ja2V0SW5pdFNldHRpbmcsXG4gICAgU1NlcnZlcixcbiAgICBIdHRwSW5pdFNldHRpbmcsXG4gICAgQmFzZVV0aWxzLFxuICAgIEJhc2VTUUxIZWxwZXIsXG4gICAgQmFzZURhdGFIZWxwZXIsXG4gICAgVHJhbnNhY3Rpb24sXG4gICAgTm90SW1wbGVtZW50ZWQsXG4gICAgTGlic0V4Y2VwdGlvbnMsXG4gICAgTXlzcWxDb250ZXh0LFxuICAgIEJhc2VSZXNwb25zZSxcbiAgICBCYXNlVXNlckluZm8sXG4gICAgQmFzZVNlcnZpY2UsXG4gICAgQmFzZVJlcG9zaXRvcnksXG4gICAgQmFzZUV4Y2VwdGlvbnMsXG4gICAgQmFzZUVudGl0eSxcbiAgICBCYXNlQ29udHJvbGxlcixcbiAgICBEb2NDaGFuZ2VkLFxuICAgIEVudGl0eSxcbiAgICBBbnlFbnRpdHksXG4gICAgQmFzZUh0dHBTdGF0dXNDb2RlLFxuICAgIEJhc2VDb25zdGFudCxcbiAgICBTUUxTZXJ2ZXJUeXBlLFxuICAgIElCYXNlQ29udGV4dCxcbiAgICBJUXVlcnlPcHRpb25zLFxuICAgIGNvbnRhaW5lcixcbiAgICBhdXRvUHJvdmlkZSxcbiAgICBwcm92aWRlLFxuICAgIHByb3ZpZGVOYW1lZCxcbiAgICBpbmplY3QsXG4gICAgY29udHJvbGxlcixcbiAgICBodHRwUG9zdCxcbiAgICBodHRwUHV0LFxuICAgIFRZUEUsXG4gICAgdmFsaWRhdGUsXG4gICAgaHR0cEdldCxcbiAgICBodHRwTWV0aG9kLFxuICAgIGh0dHBQYXRjaCxcbiAgICBodHRwSGVhZCxcbiAgICBhbGwsXG4gICAgaHR0cERlbGV0ZSxcbiAgICByZXF1ZXN0LFxuICAgIHJlc3BvbnNlLFxuICAgIHJlcXVlc3RQYXJhbSxcbiAgICBxdWVyeVBhcmFtLFxuICAgIHJlcXVlc3RCb2R5LFxuICAgIHJlcXVlc3RIZWFkZXJzLFxuICAgIGNvb2tpZXMsXG4gICAgbmV4dFxufTtcbiJdfQ==