"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_tracer_1 = require("inversify-tracer");
require("reflect-metadata");
const log4js = require("koa-log4");
const _ = require("lodash");
const EnumTracerconfig_1 = require("../config/EnumTracerconfig");
const AnyEntity_1 = require("../models/AnyEntity");
const BaseEntity_1 = require("../models/BaseEntity");
const BaseUtils_1 = require("../utils/BaseUtils");
const _log = log4js.getLogger('Tracer');
const LOG_TOO_BIG = 5;
const STRING_TOO_BIG = 100;
const OBJ_TOO_BIG = 15;
const SIZE_TOO_BIG = 10;
const autoParse = (obj) => {
    if (_.isBuffer(obj)) {
        return '<BUFFER '
            + _.take(obj, LOG_TOO_BIG) + 'More ' + (_.size(obj) - LOG_TOO_BIG) + '.items>';
    }
    else if (_.isString(obj)) {
        return _.truncate(obj, {
            length: STRING_TOO_BIG,
            omission: ' <StringTooBig...>'
        });
    }
    else if (_.isNumber(obj)) {
        return obj;
    }
    else if (_.isDate(obj)) {
        return BaseUtils_1.default.DBTimeFormat(obj);
    }
    else if (obj instanceof BaseEntity_1.default) {
        return _.mapValues(obj.toJSON(), (v) => {
            if (_.isBuffer(v)) {
                return '<BUFFER '
                    + _.take(v, LOG_TOO_BIG) + 'More ' + (_.size(v) - LOG_TOO_BIG) + '.items>';
            }
            else if (_.isString(v)) {
                return _.truncate(v, {
                    length: STRING_TOO_BIG,
                    omission: ' <StringTooBig...>'
                });
            }
            else if (_.isNumber(v)) {
                return v;
            }
            else if (_.isDate(v)) {
                return BaseUtils_1.default.DBTimeFormat(v);
            }
            else if (_.size(v) > LOG_TOO_BIG) {
                return '<TOO-BIG-DATA '
                    + _.take(v, LOG_TOO_BIG) + 'More ' + (_.size(v) - LOG_TOO_BIG) + '.items>';
            }
            else {
                return v;
            }
        });
    }
    else if (_.isObject(obj)) {
        const keys = _.keys(obj);
        const size = _.size(keys);
        let newObj = obj;
        if (size > OBJ_TOO_BIG) {
            const tKeys = _.take(keys, OBJ_TOO_BIG);
            tKeys.push('TooBig');
            const tValues = _.take(_.values(obj), OBJ_TOO_BIG);
            tValues.push('More ' + (size - OBJ_TOO_BIG) + '.items');
            newObj = new AnyEntity_1.default().toObj(tKeys, tValues);
        }
        return _.mapValues(newObj, (ab) => {
            return autoParse(ab);
        });
    }
    else if (_.isArrayLikeObject(obj)) {
        const size = _.size(obj);
        let newObj = obj;
        if (size > SIZE_TOO_BIG) {
            newObj = _.take(obj, SIZE_TOO_BIG);
            newObj.push({
                TooBig: 'More ' + (size - OBJ_TOO_BIG) + '.items'
            });
        }
        return _.map(newObj, (o) => {
            return autoParse(o);
        });
    }
    else {
        if (_.size(obj) > LOG_TOO_BIG) {
            return '<TOO-BIG-DATA '
                + _.take(obj, LOG_TOO_BIG) + 'More ' + (_.size(obj) - LOG_TOO_BIG) + '.items>';
        }
        return obj;
    }
};
class IocTracer {
    apply(iocData) {
        this.instance.apply(iocData);
    }
    constructor(filters) {
        this.instance = new inversify_tracer_1.InversifyTracer({
            filters: EnumTracerconfig_1.getEnumTracerconfigSetting(filters),
            inspectReturnedPromise: true
        });
        this.instance.on('call', (callInfo) => {
            let parametersWithValue;
            parametersWithValue = callInfo.parameters.map((param) => {
                let m;
                try {
                    m = JSON.stringify(autoParse(param.value));
                }
                catch (_a) {
                    m = '[Circular Json]';
                }
                return `\n  { ${param.name}: ` + m + ' }';
            });
            _log.debug('Call->', `${callInfo.className}.${callInfo.methodName}(`
                + parametersWithValue + '\n);');
        });
        this.instance.on('return', (returnInfo) => {
            if (returnInfo.result instanceof Error) {
                throw returnInfo.result;
            }
            let parametersWithValue;
            try {
                parametersWithValue = JSON.stringify(autoParse(returnInfo.result));
            }
            catch (_a) {
                parametersWithValue = returnInfo.result;
            }
            if (!_.endsWith(returnInfo.className, 'Controller')) {
                _log.debug('Return->', `${returnInfo.className}.${returnInfo.methodName}() => \n  ${parametersWithValue}\n;`);
            }
        });
    }
}
exports.default = IocTracer;
//# sourceMappingURL=data:application/json;base64,