"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const BaseEntity_1 = require("./BaseEntity");
class BaseUserInfo extends BaseEntity_1.default {
    getList() {
        return [
            'operatorSerial',
            'operatorName',
            'groupSerial',
            'groupSerial',
            'status',
            'loginFail',
            'lastPWChangedTime',
            'workstationID',
            'actionSection',
            'sessionSerial'
        ];
    }
    set operatorSerial(value) {
        this._operatorSerial = value;
    }
    get operatorSerial() {
        return this._operatorSerial;
    }
    set operatorName(value) {
        this._operatorName = value;
    }
    get operatorName() {
        return this._operatorName;
    }
    set groupSerial(value) {
        this._groupSerial = value;
    }
    get groupSerial() {
        return this._groupSerial;
    }
    set status(value) {
        this._status = value;
    }
    get status() {
        return this._status;
    }
    set loginFail(value) {
        this._loginFail = value;
    }
    get loginFail() {
        return this._loginFail;
    }
    set lastPWChangedTime(value) {
        this._lastPWChangedTime = value;
    }
    get lastPWChangedTime() {
        return this._lastPWChangedTime;
    }
    set workstationID(value) {
        this._workstationID = value;
    }
    get workstationID() {
        return this._workstationID;
    }
    set actionSection(value) {
        this._actionSection = value;
    }
    get actionSection() {
        return this._actionSection;
    }
    set sessionSerial(value) {
        this._isSessionOpen = _.isUndefined(value) ? false : true;
        this._sessionSerial = value;
    }
    get sessionSerial() {
        return this._sessionSerial;
    }
    get isSessionOpen() {
        return this._isSessionOpen;
    }
}
exports.default = BaseUserInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZVVzZXJJbmZvLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibW9kZWxzL0Jhc2VVc2VySW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUM1Qiw2Q0FBc0M7QUFDdEMsTUFBcUIsWUFBYSxTQUFRLG9CQUFVO0lBQ3RDLE9BQU87UUFDYixPQUFPO1lBQ0gsZ0JBQWdCO1lBQ2hCLGNBQWM7WUFDZCxhQUFhO1lBQ2IsYUFBYTtZQUNiLFFBQVE7WUFDUixXQUFXO1lBQ1gsbUJBQW1CO1lBQ25CLGVBQWU7WUFDZixlQUFlO1lBQ2YsZUFBZTtTQUNsQixDQUFDO0lBQ04sQ0FBQztJQVlELElBQVcsY0FBYyxDQUFDLEtBQWE7UUFDbkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUNELElBQVcsY0FBYztRQUNyQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQVcsWUFBWSxDQUFDLEtBQWE7UUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQVcsWUFBWTtRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQVcsV0FBVyxDQUFDLEtBQWE7UUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQVcsV0FBVztRQUNsQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUNELElBQVcsTUFBTSxDQUFDLEtBQWE7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQUNELElBQVcsTUFBTTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBQ0QsSUFBVyxTQUFTLENBQUMsS0FBYTtRQUM5QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBQ0QsSUFBVyxTQUFTO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBQ0QsSUFBVyxpQkFBaUIsQ0FBQyxLQUFhO1FBQ3RDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUNELElBQVcsaUJBQWlCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ25DLENBQUM7SUFDRCxJQUFXLGFBQWEsQ0FBQyxLQUFhO1FBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFDRCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFDRCxJQUFXLGFBQWEsQ0FBQyxLQUFhO1FBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFDRCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFDRCxJQUFXLGFBQWEsQ0FBQyxLQUFhO1FBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDMUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQVcsYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQVcsYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztDQUNKO0FBcEZELCtCQW9GQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBHYW1hRW50aXR5IGZyb20gJy4vQmFzZUVudGl0eSc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlVXNlckluZm8gZXh0ZW5kcyBHYW1hRW50aXR5IHtcbiAgICBwcm90ZWN0ZWQgZ2V0TGlzdCgpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAnb3BlcmF0b3JTZXJpYWwnLFxuICAgICAgICAgICAgJ29wZXJhdG9yTmFtZScsXG4gICAgICAgICAgICAnZ3JvdXBTZXJpYWwnLFxuICAgICAgICAgICAgJ2dyb3VwU2VyaWFsJyxcbiAgICAgICAgICAgICdzdGF0dXMnLFxuICAgICAgICAgICAgJ2xvZ2luRmFpbCcsXG4gICAgICAgICAgICAnbGFzdFBXQ2hhbmdlZFRpbWUnLFxuICAgICAgICAgICAgJ3dvcmtzdGF0aW9uSUQnLFxuICAgICAgICAgICAgJ2FjdGlvblNlY3Rpb24nLFxuICAgICAgICAgICAgJ3Nlc3Npb25TZXJpYWwnXG4gICAgICAgIF07XG4gICAgfVxuICAgIHByaXZhdGUgX29wZXJhdG9yU2VyaWFsOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfb3BlcmF0b3JOYW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfZ3JvdXBTZXJpYWw6IG51bWJlcjtcbiAgICBwcml2YXRlIF9zdGF0dXM6IG51bWJlcjtcbiAgICBwcml2YXRlIF9sb2dpbkZhaWw6IG51bWJlcjtcbiAgICBwcml2YXRlIF9sYXN0UFdDaGFuZ2VkVGltZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX3dvcmtzdGF0aW9uSUQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9hY3Rpb25TZWN0aW9uOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfc2Vzc2lvblNlcmlhbDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2lzU2Vzc2lvbk9wZW46IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgc2V0IG9wZXJhdG9yU2VyaWFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fb3BlcmF0b3JTZXJpYWwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBvcGVyYXRvclNlcmlhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZXJhdG9yU2VyaWFsO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IG9wZXJhdG9yTmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX29wZXJhdG9yTmFtZSA9IHZhbHVlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IG9wZXJhdG9yTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZXJhdG9yTmFtZTtcbiAgICB9XG4gICAgcHVibGljIHNldCBncm91cFNlcmlhbCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2dyb3VwU2VyaWFsID0gdmFsdWU7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgZ3JvdXBTZXJpYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncm91cFNlcmlhbDtcbiAgICB9XG4gICAgcHVibGljIHNldCBzdGF0dXModmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBzdGF0dXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgbG9naW5GYWlsKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fbG9naW5GYWlsID0gdmFsdWU7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgbG9naW5GYWlsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9naW5GYWlsO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IGxhc3RQV0NoYW5nZWRUaW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbGFzdFBXQ2hhbmdlZFRpbWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBsYXN0UFdDaGFuZ2VkVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3RQV0NoYW5nZWRUaW1lO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IHdvcmtzdGF0aW9uSUQodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl93b3Jrc3RhdGlvbklEID0gdmFsdWU7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgd29ya3N0YXRpb25JRCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzdGF0aW9uSUQ7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgYWN0aW9uU2VjdGlvbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2FjdGlvblNlY3Rpb24gPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBhY3Rpb25TZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uU2VjdGlvbjtcbiAgICB9XG4gICAgcHVibGljIHNldCBzZXNzaW9uU2VyaWFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5faXNTZXNzaW9uT3BlbiA9IF8uaXNVbmRlZmluZWQodmFsdWUpID8gZmFsc2UgOiB0cnVlO1xuICAgICAgICB0aGlzLl9zZXNzaW9uU2VyaWFsID0gdmFsdWU7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgc2Vzc2lvblNlcmlhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb25TZXJpYWw7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgaXNTZXNzaW9uT3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzU2Vzc2lvbk9wZW47XG4gICAgfVxufVxuIl19