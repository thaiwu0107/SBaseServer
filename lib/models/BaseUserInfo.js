"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const BaseEntity_1 = require("./BaseEntity");
class BaseUserInfo extends BaseEntity_1.default {
    getList() {
        return [
            'operatorSerial',
            'operatorName',
            'groupSerial',
            'groupSerial',
            'status',
            'loginFail',
            'lastPWChangedTime',
            'workstationID',
            'actionSection',
            'sessionSerial'
        ];
    }
    set operatorSerial(value) {
        this._operatorSerial = value;
    }
    get operatorSerial() {
        return this._operatorSerial;
    }
    set operatorName(value) {
        this._operatorName = value;
    }
    get operatorName() {
        return this._operatorName;
    }
    set groupSerial(value) {
        this._groupSerial = value;
    }
    get groupSerial() {
        return this._groupSerial;
    }
    set status(value) {
        this._status = value;
    }
    get status() {
        return this._status;
    }
    set loginFail(value) {
        this._loginFail = value;
    }
    get loginFail() {
        return this._loginFail;
    }
    set lastPWChangedTime(value) {
        this._lastPWChangedTime = value;
    }
    get lastPWChangedTime() {
        return this._lastPWChangedTime;
    }
    set workstationID(value) {
        this._workstationID = value;
    }
    get workstationID() {
        return this._workstationID;
    }
    set actionSection(value) {
        this._actionSection = value;
    }
    get actionSection() {
        return this._actionSection;
    }
    set sessionSerial(value) {
        this._isSessionOpen = _.isUndefined(value) ? false : true;
        this._sessionSerial = value;
    }
    get sessionSerial() {
        return this._sessionSerial;
    }
    get isSessionOpen() {
        return this._isSessionOpen;
    }
}
exports.default = BaseUserInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZVVzZXJJbmZvLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9nZ3R0b280NC9EZXNrdG9wL0Jhc2VTb2NrZXRTZXJ2ZXIvc3JjLyIsInNvdXJjZXMiOlsibW9kZWxzL0Jhc2VVc2VySW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRCQUE0QjtBQUM1Qiw2Q0FBc0M7QUFDdEMsa0JBQWtDLFNBQVEsb0JBQVU7SUFDdEMsT0FBTztRQUNiLE9BQU87WUFDSCxnQkFBZ0I7WUFDaEIsY0FBYztZQUNkLGFBQWE7WUFDYixhQUFhO1lBQ2IsUUFBUTtZQUNSLFdBQVc7WUFDWCxtQkFBbUI7WUFDbkIsZUFBZTtZQUNmLGVBQWU7WUFDZixlQUFlO1NBQ2xCLENBQUM7SUFDTixDQUFDO0lBWUQsSUFBVyxjQUFjLENBQUMsS0FBYTtRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBQ0QsSUFBVyxjQUFjO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBVyxZQUFZLENBQUMsS0FBYTtRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBQ0QsSUFBVyxZQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDO0lBQ0QsSUFBVyxXQUFXLENBQUMsS0FBYTtRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBQ0QsSUFBVyxXQUFXO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBQ0QsSUFBVyxNQUFNLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBQ0QsSUFBVyxNQUFNO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxJQUFXLFNBQVMsQ0FBQyxLQUFhO1FBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFDRCxJQUFXLFNBQVM7UUFDaEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFDRCxJQUFXLGlCQUFpQixDQUFDLEtBQWE7UUFDdEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBQ0QsSUFBVyxpQkFBaUI7UUFDeEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDbkMsQ0FBQztJQUNELElBQVcsYUFBYSxDQUFDLEtBQWE7UUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQVcsYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQVcsYUFBYSxDQUFDLEtBQWE7UUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUNELElBQVcsYUFBYTtRQUNwQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUNELElBQVcsYUFBYSxDQUFDLEtBQWE7UUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMxRCxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0lBQ0QsSUFBVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0NBQ0o7QUFwRkQsK0JBb0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEdhbWFFbnRpdHkgZnJvbSAnLi9CYXNlRW50aXR5JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VVc2VySW5mbyBleHRlbmRzIEdhbWFFbnRpdHkge1xuICAgIHByb3RlY3RlZCBnZXRMaXN0KCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICdvcGVyYXRvclNlcmlhbCcsXG4gICAgICAgICAgICAnb3BlcmF0b3JOYW1lJyxcbiAgICAgICAgICAgICdncm91cFNlcmlhbCcsXG4gICAgICAgICAgICAnZ3JvdXBTZXJpYWwnLFxuICAgICAgICAgICAgJ3N0YXR1cycsXG4gICAgICAgICAgICAnbG9naW5GYWlsJyxcbiAgICAgICAgICAgICdsYXN0UFdDaGFuZ2VkVGltZScsXG4gICAgICAgICAgICAnd29ya3N0YXRpb25JRCcsXG4gICAgICAgICAgICAnYWN0aW9uU2VjdGlvbicsXG4gICAgICAgICAgICAnc2Vzc2lvblNlcmlhbCdcbiAgICAgICAgXTtcbiAgICB9XG4gICAgcHJpdmF0ZSBfb3BlcmF0b3JTZXJpYWw6IG51bWJlcjtcbiAgICBwcml2YXRlIF9vcGVyYXRvck5hbWU6IHN0cmluZztcbiAgICBwcml2YXRlIF9ncm91cFNlcmlhbDogbnVtYmVyO1xuICAgIHByaXZhdGUgX3N0YXR1czogbnVtYmVyO1xuICAgIHByaXZhdGUgX2xvZ2luRmFpbDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2xhc3RQV0NoYW5nZWRUaW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfd29ya3N0YXRpb25JRDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2FjdGlvblNlY3Rpb246IHN0cmluZztcbiAgICBwcml2YXRlIF9zZXNzaW9uU2VyaWFsOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfaXNTZXNzaW9uT3BlbjogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBzZXQgb3BlcmF0b3JTZXJpYWwodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9vcGVyYXRvclNlcmlhbCA9IHZhbHVlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IG9wZXJhdG9yU2VyaWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlcmF0b3JTZXJpYWw7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgb3BlcmF0b3JOYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fb3BlcmF0b3JOYW1lID0gdmFsdWU7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgb3BlcmF0b3JOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlcmF0b3JOYW1lO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IGdyb3VwU2VyaWFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fZ3JvdXBTZXJpYWwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBncm91cFNlcmlhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwU2VyaWFsO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IHN0YXR1cyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IHZhbHVlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IHN0YXR1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcbiAgICB9XG4gICAgcHVibGljIHNldCBsb2dpbkZhaWwodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9sb2dpbkZhaWwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBsb2dpbkZhaWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2dpbkZhaWw7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgbGFzdFBXQ2hhbmdlZFRpbWUodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sYXN0UFdDaGFuZ2VkVGltZSA9IHZhbHVlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IGxhc3RQV0NoYW5nZWRUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFzdFBXQ2hhbmdlZFRpbWU7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgd29ya3N0YXRpb25JRCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3dvcmtzdGF0aW9uSUQgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldCB3b3Jrc3RhdGlvbklEKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd29ya3N0YXRpb25JRDtcbiAgICB9XG4gICAgcHVibGljIHNldCBhY3Rpb25TZWN0aW9uKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fYWN0aW9uU2VjdGlvbiA9IHZhbHVlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IGFjdGlvblNlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25TZWN0aW9uO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IHNlc3Npb25TZXJpYWwodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9pc1Nlc3Npb25PcGVuID0gXy5pc1VuZGVmaW5lZCh2YWx1ZSkgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgIHRoaXMuX3Nlc3Npb25TZXJpYWwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBzZXNzaW9uU2VyaWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Vzc2lvblNlcmlhbDtcbiAgICB9XG4gICAgcHVibGljIGdldCBpc1Nlc3Npb25PcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTZXNzaW9uT3BlbjtcbiAgICB9XG59XG4iXX0=