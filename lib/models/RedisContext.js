"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IORedis = require("ioredis");
const log4js = require("koa-log4");
const BaseUtils_1 = require("../utils/BaseUtils");
const log = log4js.getLogger('RedisContext');
class RedisContext {
    constructor() { }
    static async initialize(jsonConfig) {
        RedisContext.instance.redis = new IORedis(jsonConfig.port, jsonConfig.host, {
            dropBufferSupport: true,
            enableReadyCheck: true,
            stringNumbers: true
        });
        const changePromis = RedisContext.instance.redis;
        changePromis.Promise = global.Promise;
        IORedis.Command.setArgumentTransformer('hmset', (args) => {
            if (args.length === 2) {
                if (typeof Map !== 'undefined' && args[1] instanceof Map) {
                    // utils is a internal module of ioredis
                    return [args[0]].concat(BaseUtils_1.default.convertMapToArray(args[1]));
                }
                if (typeof args[1] === 'object' && args[1] !== null) {
                    return [args[0]].concat(BaseUtils_1.default.convertObjectToArray(args[1]));
                }
            }
            return args;
        });
        IORedis.Command.setReplyTransformer('hgetall', (result) => {
            if (Array.isArray(result)) {
                const obj = {};
                for (let i = 0; i < result.length; i += 2) {
                    obj[result[i]] = result[i + 1];
                }
                return obj;
            }
            return result;
        });
        IORedis.Command.setReplyTransformer('exec', (result) => {
            if (Array.isArray(result)) {
                let length = result.length;
                const finalData = [];
                while (length--) {
                    const error = result[length][0];
                    if (error) {
                        log.error('redis.exec() error: ' + error);
                        throw error;
                    }
                    finalData.push(result[length][1]);
                }
                return finalData;
            }
            return result;
        });
        log.info(`RedisContext is ready.`);
    }
    static async initializeCluster(jsonConfig) {
        RedisContext.instance.redis = new IORedis.Cluster(jsonConfig, {
            enableReadyCheck: true,
            clusterRetryStrategy: (times) => {
                return Math.min(100 + times * 2, 2000);
            },
            scaleReads: 'all',
            redisOptions: {
                dropBufferSupport: true,
                enableReadyCheck: true,
                stringNumbers: true
            }
        });
        const changePromis = RedisContext.instance.redis;
        changePromis.Promise = global.Promise;
        RedisContext.instance.allAll = RedisContext.instance.redis.nodes('all');
        RedisContext.instance.allSlaves = RedisContext.instance.redis.nodes('slave');
        RedisContext.instance.allMasters = RedisContext.instance.redis.nodes('master');
        IORedis.Command.setArgumentTransformer('hmset', (args) => {
            if (args.length === 2) {
                if (typeof Map !== 'undefined' && args[1] instanceof Map) {
                    // utils is a internal module of ioredis
                    return [args[0]].concat(BaseUtils_1.default.convertMapToArray(args[1]));
                }
                if (typeof args[1] === 'object' && args[1] !== null) {
                    return [args[0]].concat(BaseUtils_1.default.convertObjectToArray(args[1]));
                }
            }
            return args;
        });
        IORedis.Command.setReplyTransformer('hgetall', (result) => {
            if (Array.isArray(result)) {
                const obj = {};
                for (let i = 0; i < result.length; i += 2) {
                    obj[result[i]] = result[i + 1];
                }
                return obj;
            }
            return result;
        });
        log.info(`RedisContext is ready.`);
    }
    static getInstance() {
        return RedisContext.instance;
    }
    getRedis() {
        return RedisContext.instance.redis;
    }
    getAllNode() {
        return RedisContext.instance.allAll;
    }
    getallMasters() {
        return RedisContext.instance.allMasters;
    }
    getallSlaves() {
        return RedisContext.instance.allSlaves;
    }
}
RedisContext.instance = new RedisContext();
exports.default = RedisContext;
//# sourceMappingURL=data:application/json;base64,