"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IORedis = require("ioredis");
const log4js = require("koa-log4");
const BaseUtils_1 = require("../utils/BaseUtils");
const log = log4js.getLogger('RedisContext');
class RedisContext {
    constructor() { }
    static async initialize(jsonConfig) {
        RedisContext.instance.redis = new IORedis.Cluster(jsonConfig, {
            enableReadyCheck: true,
            clusterRetryStrategy: (times) => {
                return Math.min(100 + times * 2, 2000);
            },
            scaleReads: 'all',
            redisOptions: {
                dropBufferSupport: true,
                enableReadyCheck: true
            }
        });
        const changePromis = RedisContext.instance.redis;
        changePromis.Promise = global.Promise;
        RedisContext.instance.allAll = RedisContext.instance.redis.nodes('all');
        RedisContext.instance.allSlaves = RedisContext.instance.redis.nodes('slave');
        RedisContext.instance.allMasters = RedisContext.instance.redis.nodes('master');
        IORedis.Command.setArgumentTransformer('hmset', (args) => {
            if (args.length === 2) {
                if (typeof Map !== 'undefined' && args[1] instanceof Map) {
                    // utils is a internal module of ioredis
                    return [args[0]].concat(BaseUtils_1.default.convertMapToArray(args[1]));
                }
                if (typeof args[1] === 'object' && args[1] !== null) {
                    return [args[0]].concat(BaseUtils_1.default.convertObjectToArray(args[1]));
                }
            }
            return args;
        });
        IORedis.Command.setReplyTransformer('hgetall', (result) => {
            if (Array.isArray(result)) {
                const obj = {};
                for (let i = 0; i < result.length; i += 2) {
                    obj[result[i]] = result[i + 1];
                }
                return obj;
            }
            return result;
        });
        log.info(`RedisContext is ready.`);
    }
    static getInstance() {
        return RedisContext.instance;
    }
    getRedis() {
        return RedisContext.instance.redis;
    }
    getAllNode() {
        return RedisContext.instance.allAll;
    }
    getallMasters() {
        return RedisContext.instance.allMasters;
    }
    getallSlaves() {
        return RedisContext.instance.allSlaves;
    }
}
RedisContext.instance = new RedisContext();
exports.default = RedisContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkaXNDb250ZXh0LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibW9kZWxzL1JlZGlzQ29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyxtQ0FBbUM7QUFFbkMsa0RBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDN0MsTUFBcUIsWUFBWTtJQWlEN0IsZ0JBQXdCLENBQUM7SUF6Q2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQWlDO1FBQzVELFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDMUQsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixvQkFBb0IsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUM1QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDM0MsQ0FBQztZQUNELFVBQVUsRUFBRSxLQUFLO1lBQ2pCLFlBQVksRUFBRTtnQkFDVixpQkFBaUIsRUFBRSxJQUFJO2dCQUN2QixnQkFBZ0IsRUFBRSxJQUFJO2FBQ3pCO1NBQ0osQ0FBUSxDQUFDO1FBQ1YsTUFBTSxZQUFZLEdBQVEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDdEQsWUFBWSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ3RDLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4RSxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0UsWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9FLE9BQU8sQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDbkIsSUFBSSxPQUFPLEdBQUcsS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLEdBQUcsRUFBRTtvQkFDdEQsd0NBQXdDO29CQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFTLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDakU7Z0JBQ0QsSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtvQkFDakQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxtQkFBUyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3BFO2FBQ0o7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDdEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN2QixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7Z0JBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDdkMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2xDO2dCQUNELE9BQU8sR0FBRyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBR00sTUFBTSxDQUFDLFdBQVc7UUFDckIsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBRU0sVUFBVTtRQUNiLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDeEMsQ0FBQztJQUVNLGFBQWE7UUFDaEIsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUM1QyxDQUFDO0lBRU0sWUFBWTtRQUNmLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDM0MsQ0FBQzs7QUFuRWMscUJBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBRmpELCtCQXNFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIElPUmVkaXMgZnJvbSAnaW9yZWRpcyc7XG5pbXBvcnQgKiBhcyBsb2c0anMgZnJvbSAna29hLWxvZzQnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEJhc2VVdGlscyBmcm9tICcuLi91dGlscy9CYXNlVXRpbHMnO1xuXG5jb25zdCBsb2cgPSBsb2c0anMuZ2V0TG9nZ2VyKCdSZWRpc0NvbnRleHQnKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZGlzQ29udGV4dCB7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZSA9IG5ldyBSZWRpc0NvbnRleHQoKTtcbiAgICBwcml2YXRlIHJlZGlzOiBhbnk7XG4gICAgcHJpdmF0ZSBhbGxNYXN0ZXJzOiBJT1JlZGlzLlJlZGlzW107XG4gICAgcHJpdmF0ZSBhbGxTbGF2ZXM6IElPUmVkaXMuUmVkaXNbXTtcbiAgICBwcml2YXRlIGFsbEFsbDogSU9SZWRpcy5SZWRpc1tdO1xuXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBpbml0aWFsaXplKGpzb25Db25maWc6IElPUmVkaXMuQ2x1c3Rlck5vZGVbXSkge1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXMgPSBuZXcgSU9SZWRpcy5DbHVzdGVyKGpzb25Db25maWcsIHtcbiAgICAgICAgICAgIGVuYWJsZVJlYWR5Q2hlY2s6IHRydWUsXG4gICAgICAgICAgICBjbHVzdGVyUmV0cnlTdHJhdGVneTogKHRpbWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKDEwMCArIHRpbWVzICogMiwgMjAwMCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NhbGVSZWFkczogJ2FsbCcsXG4gICAgICAgICAgICByZWRpc09wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBkcm9wQnVmZmVyU3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbmFibGVSZWFkeUNoZWNrOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pIGFzIGFueTtcbiAgICAgICAgY29uc3QgY2hhbmdlUHJvbWlzOiBhbnkgPSBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXM7XG4gICAgICAgIGNoYW5nZVByb21pcy5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4gICAgICAgIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5hbGxBbGwgPSBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXMubm9kZXMoJ2FsbCcpO1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UuYWxsU2xhdmVzID0gUmVkaXNDb250ZXh0Lmluc3RhbmNlLnJlZGlzLm5vZGVzKCdzbGF2ZScpO1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UuYWxsTWFzdGVycyA9IFJlZGlzQ29udGV4dC5pbnN0YW5jZS5yZWRpcy5ub2RlcygnbWFzdGVyJyk7XG4gICAgICAgIElPUmVkaXMuQ29tbWFuZC5zZXRBcmd1bWVudFRyYW5zZm9ybWVyKCdobXNldCcsIChhcmdzKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgYXJnc1sxXSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1dGlscyBpcyBhIGludGVybmFsIG1vZHVsZSBvZiBpb3JlZGlzXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbYXJnc1swXV0uY29uY2F0KEJhc2VVdGlscy5jb252ZXJ0TWFwVG9BcnJheShhcmdzWzFdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ29iamVjdCcgJiYgYXJnc1sxXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2FyZ3NbMF1dLmNvbmNhdChCYXNlVXRpbHMuY29udmVydE9iamVjdFRvQXJyYXkoYXJnc1sxXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhcmdzO1xuICAgICAgICB9KTtcbiAgICAgICAgSU9SZWRpcy5Db21tYW5kLnNldFJlcGx5VHJhbnNmb3JtZXIoJ2hnZXRhbGwnLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqW3Jlc3VsdFtpXV0gPSByZXN1bHRbaSArIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGxvZy5pbmZvKGBSZWRpc0NvbnRleHQgaXMgcmVhZHkuYCk7XG4gICAgfVxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogUmVkaXNDb250ZXh0IHtcbiAgICAgICAgcmV0dXJuIFJlZGlzQ29udGV4dC5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmVkaXMoKTogSU9SZWRpcy5DbHVzdGVyIHtcbiAgICAgICAgcmV0dXJuIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5yZWRpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWxsTm9kZSgpOiBJT1JlZGlzLlJlZGlzW10ge1xuICAgICAgICByZXR1cm4gUmVkaXNDb250ZXh0Lmluc3RhbmNlLmFsbEFsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0YWxsTWFzdGVycygpOiBJT1JlZGlzLlJlZGlzW10ge1xuICAgICAgICByZXR1cm4gUmVkaXNDb250ZXh0Lmluc3RhbmNlLmFsbE1hc3RlcnM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldGFsbFNsYXZlcygpOiBJT1JlZGlzLlJlZGlzW10ge1xuICAgICAgICByZXR1cm4gUmVkaXNDb250ZXh0Lmluc3RhbmNlLmFsbFNsYXZlcztcbiAgICB9XG59XG4iXX0=