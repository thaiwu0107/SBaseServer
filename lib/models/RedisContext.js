"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IORedis = require("ioredis");
const log4js = require("koa-log4");
const log = log4js.getLogger('RedisContext');
class RedisContext {
    constructor() { }
    static async initialize(jsonConfig) {
        RedisContext.instance.redis = new IORedis.Cluster(jsonConfig, {
            enableOfflineQueue: false,
            enableReadyCheck: true,
            clusterRetryStrategy: (times) => {
                return Math.min(100 + times * 2, 2000);
            },
            scaleReads: 'all',
            redisOptions: {
                enableOfflineQueue: false,
                dropBufferSupport: true,
                enableReadyCheck: true
            }
        });
        const changePromis = RedisContext.instance.redis;
        changePromis.Promise = global.Promise;
        RedisContext.instance.allAll = RedisContext.instance.redis.nodes('all');
        RedisContext.instance.allSlaves = RedisContext.instance.redis.nodes('slave');
        RedisContext.instance.allMasters = RedisContext.instance.redis.nodes('master');
    }
    static getInstance() {
        return RedisContext.instance;
    }
    getRedis() {
        return RedisContext.instance.redis;
    }
    getAllNode() {
        return RedisContext.instance.allAll;
    }
    getallMasters() {
        return RedisContext.instance.allMasters;
    }
    getallSlaves() {
        return RedisContext.instance.allSlaves;
    }
}
RedisContext.instance = new RedisContext();
exports.default = RedisContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkaXNDb250ZXh0LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibW9kZWxzL1JlZGlzQ29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyxtQ0FBbUM7QUFHbkMsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUM3QyxNQUFxQixZQUFZO0lBNEI3QixnQkFBd0IsQ0FBQztJQXBCbEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBaUM7UUFDNUQsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUMxRCxrQkFBa0IsRUFBRSxLQUFLO1lBQ3pCLGdCQUFnQixFQUFFLElBQUk7WUFDdEIsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDNUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNDLENBQUM7WUFDRCxVQUFVLEVBQUUsS0FBSztZQUNqQixZQUFZLEVBQUU7Z0JBQ1Ysa0JBQWtCLEVBQUUsS0FBSztnQkFDekIsaUJBQWlCLEVBQUUsSUFBSTtnQkFDdkIsZ0JBQWdCLEVBQUUsSUFBSTthQUN6QjtTQUNKLENBQVEsQ0FBQztRQUNWLE1BQU0sWUFBWSxHQUFRLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ3RELFlBQVksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUN0QyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdFLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBR00sTUFBTSxDQUFDLFdBQVc7UUFDckIsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBRU0sVUFBVTtRQUNiLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDeEMsQ0FBQztJQUVNLGFBQWE7UUFDaEIsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUM1QyxDQUFDO0lBRU0sWUFBWTtRQUNmLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDM0MsQ0FBQzs7QUE5Q2MscUJBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBRmpELCtCQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIElPUmVkaXMgZnJvbSAnaW9yZWRpcyc7XG5pbXBvcnQgKiBhcyBsb2c0anMgZnJvbSAna29hLWxvZzQnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBsb2cgPSBsb2c0anMuZ2V0TG9nZ2VyKCdSZWRpc0NvbnRleHQnKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZGlzQ29udGV4dCB7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZSA9IG5ldyBSZWRpc0NvbnRleHQoKTtcbiAgICBwcml2YXRlIHJlZGlzOiBJT1JlZGlzLkNsdXN0ZXI7XG4gICAgcHJpdmF0ZSBhbGxNYXN0ZXJzOiBJT1JlZGlzLlJlZGlzW107XG4gICAgcHJpdmF0ZSBhbGxTbGF2ZXM6IElPUmVkaXMuUmVkaXNbXTtcbiAgICBwcml2YXRlIGFsbEFsbDogSU9SZWRpcy5SZWRpc1tdO1xuXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBpbml0aWFsaXplKGpzb25Db25maWc6IElPUmVkaXMuQ2x1c3Rlck5vZGVbXSkge1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXMgPSBuZXcgSU9SZWRpcy5DbHVzdGVyKGpzb25Db25maWcsIHtcbiAgICAgICAgICAgIGVuYWJsZU9mZmxpbmVRdWV1ZTogZmFsc2UsXG4gICAgICAgICAgICBlbmFibGVSZWFkeUNoZWNrOiB0cnVlLFxuICAgICAgICAgICAgY2x1c3RlclJldHJ5U3RyYXRlZ3k6ICh0aW1lcykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbigxMDAgKyB0aW1lcyAqIDIsIDIwMDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjYWxlUmVhZHM6ICdhbGwnLFxuICAgICAgICAgICAgcmVkaXNPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlT2ZmbGluZVF1ZXVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkcm9wQnVmZmVyU3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbmFibGVSZWFkeUNoZWNrOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pIGFzIGFueTtcbiAgICAgICAgY29uc3QgY2hhbmdlUHJvbWlzOiBhbnkgPSBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXM7XG4gICAgICAgIGNoYW5nZVByb21pcy5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4gICAgICAgIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5hbGxBbGwgPSBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXMubm9kZXMoJ2FsbCcpO1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UuYWxsU2xhdmVzID0gUmVkaXNDb250ZXh0Lmluc3RhbmNlLnJlZGlzLm5vZGVzKCdzbGF2ZScpO1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UuYWxsTWFzdGVycyA9IFJlZGlzQ29udGV4dC5pbnN0YW5jZS5yZWRpcy5ub2RlcygnbWFzdGVyJyk7XG4gICAgfVxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogUmVkaXNDb250ZXh0IHtcbiAgICAgICAgcmV0dXJuIFJlZGlzQ29udGV4dC5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmVkaXMoKTogSU9SZWRpcy5DbHVzdGVyIHtcbiAgICAgICAgcmV0dXJuIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5yZWRpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWxsTm9kZSgpOiBJT1JlZGlzLlJlZGlzW10ge1xuICAgICAgICByZXR1cm4gUmVkaXNDb250ZXh0Lmluc3RhbmNlLmFsbEFsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0YWxsTWFzdGVycygpOiBJT1JlZGlzLlJlZGlzW10ge1xuICAgICAgICByZXR1cm4gUmVkaXNDb250ZXh0Lmluc3RhbmNlLmFsbE1hc3RlcnM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldGFsbFNsYXZlcygpOiBJT1JlZGlzLlJlZGlzW10ge1xuICAgICAgICByZXR1cm4gUmVkaXNDb250ZXh0Lmluc3RhbmNlLmFsbFNsYXZlcztcbiAgICB9XG59XG4iXX0=