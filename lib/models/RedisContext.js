"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IORedis = require("ioredis");
const log4js = require("koa-log4");
const BaseUtils_1 = require("../utils/BaseUtils");
const log = log4js.getLogger('RedisContext');
class RedisContext {
    constructor() { }
    static async initialize(jsonConfig) {
        RedisContext.instance.redis = new IORedis.Cluster(jsonConfig, {
            enableOfflineQueue: false,
            enableReadyCheck: true,
            clusterRetryStrategy: (times) => {
                return Math.min(100 + times * 2, 2000);
            },
            scaleReads: 'all',
            redisOptions: {
                enableOfflineQueue: false,
                dropBufferSupport: true,
                enableReadyCheck: true
            }
        });
        const changePromis = RedisContext.instance.redis;
        changePromis.Promise = global.Promise;
        RedisContext.instance.allAll = RedisContext.instance.redis.nodes('all');
        RedisContext.instance.allSlaves = RedisContext.instance.redis.nodes('slave');
        RedisContext.instance.allMasters = RedisContext.instance.redis.nodes('master');
        RedisContext.instance.redis.Command.setArgumentTransformer('hmset', (args) => {
            if (args.length === 2) {
                if (typeof Map !== 'undefined' && args[1] instanceof Map) {
                    // utils is a internal module of ioredis
                    return [args[0]].concat(BaseUtils_1.default.convertMapToArray(args[1]));
                }
                if (typeof args[1] === 'object' && args[1] !== null) {
                    return [args[0]].concat(BaseUtils_1.default.convertObjectToArray(args[1]));
                }
            }
            return args;
        });
        RedisContext.instance.redis.Command.setReplyTransformer('hgetall', (result) => {
            if (Array.isArray(result)) {
                const obj = {};
                for (let i = 0; i < result.length; i += 2) {
                    obj[result[i]] = result[i + 1];
                }
                return obj;
            }
            return result;
        });
        log.info(`RedisContext is ready.`);
    }
    static getInstance() {
        return RedisContext.instance;
    }
    getRedis() {
        return RedisContext.instance.redis;
    }
    getAllNode() {
        return RedisContext.instance.allAll;
    }
    getallMasters() {
        return RedisContext.instance.allMasters;
    }
    getallSlaves() {
        return RedisContext.instance.allSlaves;
    }
}
RedisContext.instance = new RedisContext();
exports.default = RedisContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkaXNDb250ZXh0LmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibW9kZWxzL1JlZGlzQ29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyxtQ0FBbUM7QUFFbkMsa0RBQTJDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDN0MsTUFBcUIsWUFBWTtJQW1EN0IsZ0JBQXdCLENBQUM7SUEzQ2xCLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQWlDO1FBQzVELFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDMUQsa0JBQWtCLEVBQUUsS0FBSztZQUN6QixnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLG9CQUFvQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQzVCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMzQyxDQUFDO1lBQ0QsVUFBVSxFQUFFLEtBQUs7WUFDakIsWUFBWSxFQUFFO2dCQUNWLGtCQUFrQixFQUFFLEtBQUs7Z0JBQ3pCLGlCQUFpQixFQUFFLElBQUk7Z0JBQ3ZCLGdCQUFnQixFQUFFLElBQUk7YUFDekI7U0FDSixDQUFRLENBQUM7UUFDVixNQUFNLFlBQVksR0FBUSxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUN0RCxZQUFZLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDdEMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hFLFlBQVksQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3RSxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0UsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3pFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ25CLElBQUksT0FBTyxHQUFHLEtBQUssV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxHQUFHLEVBQUU7b0JBQ3RELHdDQUF3QztvQkFDeEMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxtQkFBUyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2pFO2dCQUNELElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7b0JBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNwRTthQUNKO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDMUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN2QixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7Z0JBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDdkMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2xDO2dCQUNELE9BQU8sR0FBRyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBR00sTUFBTSxDQUFDLFdBQVc7UUFDckIsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBRU0sVUFBVTtRQUNiLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDeEMsQ0FBQztJQUVNLGFBQWE7UUFDaEIsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUM1QyxDQUFDO0lBRU0sWUFBWTtRQUNmLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDM0MsQ0FBQzs7QUFyRWMscUJBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBRmpELCtCQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIElPUmVkaXMgZnJvbSAnaW9yZWRpcyc7XG5pbXBvcnQgKiBhcyBsb2c0anMgZnJvbSAna29hLWxvZzQnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEJhc2VVdGlscyBmcm9tICcuLi91dGlscy9CYXNlVXRpbHMnO1xuXG5jb25zdCBsb2cgPSBsb2c0anMuZ2V0TG9nZ2VyKCdSZWRpc0NvbnRleHQnKTtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZGlzQ29udGV4dCB7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZSA9IG5ldyBSZWRpc0NvbnRleHQoKTtcbiAgICBwcml2YXRlIHJlZGlzOiBhbnk7XG4gICAgcHJpdmF0ZSBhbGxNYXN0ZXJzOiBJT1JlZGlzLlJlZGlzW107XG4gICAgcHJpdmF0ZSBhbGxTbGF2ZXM6IElPUmVkaXMuUmVkaXNbXTtcbiAgICBwcml2YXRlIGFsbEFsbDogSU9SZWRpcy5SZWRpc1tdO1xuXG4gICAgcHVibGljIHN0YXRpYyBhc3luYyBpbml0aWFsaXplKGpzb25Db25maWc6IElPUmVkaXMuQ2x1c3Rlck5vZGVbXSkge1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXMgPSBuZXcgSU9SZWRpcy5DbHVzdGVyKGpzb25Db25maWcsIHtcbiAgICAgICAgICAgIGVuYWJsZU9mZmxpbmVRdWV1ZTogZmFsc2UsXG4gICAgICAgICAgICBlbmFibGVSZWFkeUNoZWNrOiB0cnVlLFxuICAgICAgICAgICAgY2x1c3RlclJldHJ5U3RyYXRlZ3k6ICh0aW1lcykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbigxMDAgKyB0aW1lcyAqIDIsIDIwMDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjYWxlUmVhZHM6ICdhbGwnLFxuICAgICAgICAgICAgcmVkaXNPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlT2ZmbGluZVF1ZXVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkcm9wQnVmZmVyU3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbmFibGVSZWFkeUNoZWNrOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pIGFzIGFueTtcbiAgICAgICAgY29uc3QgY2hhbmdlUHJvbWlzOiBhbnkgPSBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXM7XG4gICAgICAgIGNoYW5nZVByb21pcy5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4gICAgICAgIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5hbGxBbGwgPSBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXMubm9kZXMoJ2FsbCcpO1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UuYWxsU2xhdmVzID0gUmVkaXNDb250ZXh0Lmluc3RhbmNlLnJlZGlzLm5vZGVzKCdzbGF2ZScpO1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UuYWxsTWFzdGVycyA9IFJlZGlzQ29udGV4dC5pbnN0YW5jZS5yZWRpcy5ub2RlcygnbWFzdGVyJyk7XG4gICAgICAgIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5yZWRpcy5Db21tYW5kLnNldEFyZ3VtZW50VHJhbnNmb3JtZXIoJ2htc2V0JywgKGFyZ3MpID0+IHtcbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJiBhcmdzWzFdIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHV0aWxzIGlzIGEgaW50ZXJuYWwgbW9kdWxlIG9mIGlvcmVkaXNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFthcmdzWzBdXS5jb25jYXQoQmFzZVV0aWxzLmNvbnZlcnRNYXBUb0FycmF5KGFyZ3NbMV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnb2JqZWN0JyAmJiBhcmdzWzFdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbYXJnc1swXV0uY29uY2F0KEJhc2VVdGlscy5jb252ZXJ0T2JqZWN0VG9BcnJheShhcmdzWzFdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgIH0pO1xuICAgICAgICBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXMuQ29tbWFuZC5zZXRSZXBseVRyYW5zZm9ybWVyKCdoZ2V0YWxsJywgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ialtyZXN1bHRbaV1dID0gcmVzdWx0W2kgKyAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgICAgICBsb2cuaW5mbyhgUmVkaXNDb250ZXh0IGlzIHJlYWR5LmApO1xuICAgIH1cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IFJlZGlzQ29udGV4dCB7XG4gICAgICAgIHJldHVybiBSZWRpc0NvbnRleHQuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJlZGlzKCk6IElPUmVkaXMuQ2x1c3RlciB7XG4gICAgICAgIHJldHVybiBSZWRpc0NvbnRleHQuaW5zdGFuY2UucmVkaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFsbE5vZGUoKTogSU9SZWRpcy5SZWRpc1tdIHtcbiAgICAgICAgcmV0dXJuIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5hbGxBbGw7XG4gICAgfVxuXG4gICAgcHVibGljIGdldGFsbE1hc3RlcnMoKTogSU9SZWRpcy5SZWRpc1tdIHtcbiAgICAgICAgcmV0dXJuIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5hbGxNYXN0ZXJzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRhbGxTbGF2ZXMoKTogSU9SZWRpcy5SZWRpc1tdIHtcbiAgICAgICAgcmV0dXJuIFJlZGlzQ29udGV4dC5pbnN0YW5jZS5hbGxTbGF2ZXM7XG4gICAgfVxufVxuIl19