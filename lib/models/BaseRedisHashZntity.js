"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const __1 = require("..");
const RedisManager_1 = require("../microServices/RedisManager");
const LibsExceptions_1 = require("./LibsExceptions");
class BaseRedisHashZntity {
    getBaseZntityId() {
        return this.baseZntityId;
    }
    setBaseZntityId(id) {
        this.baseZntityId = id;
    }
    async execDeleteAll(id) {
        if (!_.isUndefined(id)) {
            throw new LibsExceptions_1.LibsExceptions(__1.BaseHttpStatusCode.STATUS_FAIL, this.constructor.name + 'id is undefined');
        }
        else {
            const redisManger = new RedisManager_1.default();
            const felds = this.deepFeldsKeys();
            const mainKey = this.mainRedisKey() + id;
            let deepValuess = Object.values(felds);
            deepValuess = deepValuess.map((values) => {
                return values + id;
            });
            deepValuess.push(mainKey);
            await redisManger.del(...deepValuess);
        }
    }
    /**
     * 如果要更新的資料太多,可以使用這個
     * 用法就是塞數值之後,會再去判斷有沒有值在幫你塞數值
     * !!!注意第二層的資料是不會幫你處理的,會直接跳過
     * 要處理第二層資料就要自己對redis處理
     * @param {number} id
     * @memberof BaseRedisHashZntity
     */
    async execUpdateRedis(id) {
        if (!_.isUndefined(id)) {
            throw new LibsExceptions_1.LibsExceptions(__1.BaseHttpStatusCode.STATUS_FAIL, this.constructor.name + 'id is undefined');
        }
        else {
            const redisManger = new RedisManager_1.default();
            const felds = this.deepFeldsKeys();
            const mainKey = this.mainRedisKey() + id;
            const deepFelds = Object.entries(felds);
            const promiseList = [];
            const deepValuess = deepFelds.map((data) => {
                return data[0] + id;
            });
            await redisManger.del(...deepValuess);
            let length = deepFelds.length;
            const self = this;
            while (length--) {
                const feldskey = deepFelds[length][1] + id;
                const feldsName = deepFelds[length][0];
                if (this[feldsName]) {
                    self[feldsName] = feldskey;
                    promiseList.push(redisManger.rpush(feldskey, this[feldsName]));
                }
            }
            promiseList.push(redisManger.hmgetArray(mainKey, self));
            await Promise.all(promiseList);
        }
    }
    /**
     * 初始化專用,如果要把資料完整清除在初始化可以用這個
     * @param {number} id
     * @param {*} source
     * @memberof BaseRedisHashZntity
     */
    async execReuseRedis(id, source) {
        if (!_.isUndefined(source)) {
            // 先刪除所有的Redis Keys
            const redisManger = new RedisManager_1.default();
            const felds = this.deepFeldsKeys();
            const deepFelds = Object.entries(felds);
            const mainKey = this.mainRedisKey() + id;
            const mainFields = this.mainFields();
            const deepValuess = deepFelds.map((data) => {
                return data[0] + id;
            });
            deepValuess.push(mainKey);
            await redisManger.del(...deepValuess);
            // 結束 刪除所有的Redis Keys
            // 開始替換主要OBJ的成員把deepFelds裡面的key替換成主要OBJ的成員的數值
            // 並且替換過程中儲存Promise每個deepFelds的成員要塞的數值
            const promiseList = [];
            let length = deepFelds.length;
            while (length--) {
                const feldskey = deepFelds[length][1] + id;
                const feldsName = deepFelds[length][0];
                // 儲存Promise每個deepFelds的成員要塞的數值
                promiseList.push(redisManger.rpushArray(feldskey, source[feldsName]));
                source[feldsName] = feldskey;
            }
            promiseList.push(redisManger.hmsetArray(mainKey, source));
            await Promise.all(promiseList);
        }
        else {
            throw new LibsExceptions_1.LibsExceptions(__1.BaseHttpStatusCode.STATUS_FAIL, this.constructor.name + 'source is undefined');
        }
    }
}
exports.default = BaseRedisHashZntity;
//# sourceMappingURL=data:application/json;base64,