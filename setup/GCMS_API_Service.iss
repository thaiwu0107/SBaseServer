; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define AppVersion "1.0.0"
#define DeployPath ".."
#define IconPath "favicon/GAMA2.bmp"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId=4A1D898D-ED78-445C-8303-25BBC423B278
AppVersion={#AppVersion}
AppName=GAMA Casino Management System - API Service Accounting
;AppVerName=GAMA Casino Management System
AppPublisher=GAMA Technology Ltd.
AppPublisherURL=http://www.gamasys.com.tw/
AppSupportURL=http://www.gamasys.com.tw/
AppUpdatesURL=http://www.gamasys.com.tw/
DefaultDirName={pf}\GAMA\GCMS3\APIServerAccounting
DefaultGroupName=GCMS API Service Accounting
DisableProgramGroupPage=yes
OutputBaseFilename=APIServiceAccounting_{#AppVersion}
;OutputDir=userdocs:Inno Setup Examples Output
Compression=lzma2
SolidCompression=yes
; "ArchitecturesAllowed=x64" specifies that Setup cannot run on
; anything but x64.
ArchitecturesAllowed=x64
; "ArchitecturesInstallIn64BitMode=x64" requests that the install be
; done in "64-bit mode" on x64, meaning it should use the native
; 64-bit Program Files directory and the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64
AppCopyright=GAMA Technology Ltd.
WizardSmallImageFile={#IconPath}
UninstallDisplayIcon={uninstallexe}
SetupLogging=True
OutputDir=Release

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "{#DeployPath}\deploy\*"; DestDir: "{app}\deploy"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#DeployPath}\dist\*"; DestDir: "{app}\dist"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#DeployPath}\mock\*"; DestDir: "{app}\mock"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#DeployPath}\node_modules\*"; DestDir: "{app}\node_modules"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#DeployPath}\setup\*"; Excludes: "\Release, \*.iss"; DestDir: "{app}\setup"; Flags: ignoreversion recursesubdirs createallsubdirs; AfterInstall: MyAfterInstall
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\Start API Service Accounting"; Filename: "{app}\setup\startService.bat"; WorkingDir: "{app}"
Name: "{group}\Stop API Service Accounting"; Filename: "{app}\setup\stopService.bat"; WorkingDir: "{app}"
Name: "{group}\{cm:UninstallProgram,GAMA Casino Management System}"; Filename: "{uninstallexe}"

[Run]
Filename: "{app}\setup\bin\install.bat"; Flags: runhidden

[UninstallRun]
Filename: "{app}\setup\bin\uninstall.bat"; Flags: runhidden

[Code]
const
  appConfig = 'config.app.js';
  databaseConfig = 'config.database.js';
  OffsetPixels = 11;

var
  pageList: Array[1..5] of TInputQueryWizardPage;
  pageDomain: TInputQueryWizardPage;

function IsNodeJSInstalled: boolean;
begin
  result := RegKeyExists(HKEY_CURRENT_USER,'Software\Node.js');
  if not result then
  begin
    MsgBox('It must install NodeJS!', mbError, MB_OK);
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin
  // if we are right before the main installation starts and ODBC driver is not yet
  // installed, then...
  if (CurStep = ssInstall) then
  begin
    if not IsNodeJSInstalled then
    begin
      Abort;
    end;
  end;
end;

procedure OffsetPageItem(Page: TInputQueryWizardPage; Index,
  Offset: Integer);
begin
  Page.Edits[Index].Top := Page.Edits[Index].Top + Offset;
  Page.PromptLabels[Index].Top := Page.PromptLabels[Index].Top +
    Offset;
end;

procedure CreateTheDomainPages(position: Integer);
begin
  pageDomain := CreateInputQueryPage(position,
    'Domain Information', '',
    'Please specify your Domain information, then click Next.');
 
  pageDomain.Add('Http port:', False);
  pageDomain.Values[0] := '3100';
end;

function CreateTheDatabaseConfigPages(position: Integer; databaseName: String):TInputQueryWizardPage;
var
  Page : TInputQueryWizardPage;
  Index: Integer;
begin
  Page := CreateInputQueryPage(position,
    databaseName + ' Database Information', '',
    'Please specify your ' + databaseName + ' database information, then click Next.');
  Index := Page.Add('Host:', False);
  Index := Page.Add('Database:', False);
  OffsetPageItem(Page, Index, -Index * OffsetPixels);
  Index := Page.Add('User:', False);
  OffsetPageItem(Page, Index, -Index * OffsetPixels);
  Index := Page.Add('Password:', False);
  OffsetPageItem(Page, Index, -Index * OffsetPixels);

  Page.Values[0] := '192.168.122.37';
  Page.Values[1] := databaseName;
  Page.Values[2] := 'operator';
  Page.Values[3] := 'jumbo_cmsclient';
  
  Result := Page;
end;

function ExpandVariablesInFile(data: String; Page:TInputQueryWizardPage; index: Integer):String;
begin
  StringChangeEx(data, '$server'+IntToStr(index)+'$', Page.Values[0], True);
  StringChangeEx(data, '$database'+IntToStr(index)+'$', Page.Values[1], True);
  StringChangeEx(data, '$user'+IntToStr(index)+'$', Page.Values[2], True);
  StringChangeEx(data, '$password'+IntToStr(index)+'$', Page.Values[3], True);
  Result := data; 
end;

procedure MyAfterInstall();
var
  i: Integer;
  data: String;
begin
  {app config}
  if LoadStringFromFile(ExpandConstant('{app}\deploy\'+appConfig), data) then
  begin
    StringChangeEx(data, '$httpPort$', pageDomain.Values[0], True);
    SaveStringToFile(ExpandConstant('{app}\dist\config\'+appConfig), data, False);
    // DeleteFile(ExpandConstant('{app}\deploy\'+appConfig));  
  end;

  {database}
  if LoadStringFromFile(ExpandConstant('{app}\deploy\'+databaseConfig), data) then
  begin
    For i := 1 to 5 do
      data := ExpandVariablesInFile(data, pageList[i], i);

    SaveStringToFile(ExpandConstant('{app}\dist\config\'+databaseConfig), data, False);
    // DeleteFile(ExpandConstant('{app}\deploy\'+databaseConfig));  
  end;
end;

procedure AboutButtonOnClick(Sender: TObject);
begin
  MsgBox('The right casino management systems requires a deep understanding of the industry and varying needs that our clients, Casinos, are likely to face in their day to day operations.', mbInformation, mb_Ok);
end;

procedure URLLabelOnClick(Sender: TObject);
var
  ErrorCode: Integer;
begin
  ShellExecAsOriginalUser('open', 'http://www.gamasys.com.tw/', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
end;

procedure CreateAboutButtonAndURLLabel(ParentForm: TSetupForm; CancelButton: TNewButton);
var
  AboutButton: TNewButton;
  URLLabel: TNewStaticText;
begin
  AboutButton := TNewButton.Create(ParentForm);
  AboutButton.Left := ParentForm.ClientWidth - CancelButton.Left - CancelButton.Width;
  AboutButton.Top := CancelButton.Top;
  AboutButton.Width := CancelButton.Width;
  AboutButton.Height := CancelButton.Height;
  AboutButton.Caption := '&About...';
  AboutButton.OnClick := @AboutButtonOnClick;
  AboutButton.Parent := ParentForm;

  URLLabel := TNewStaticText.Create(ParentForm);
  URLLabel.Caption := 'www.gamasys.com.tw';
  URLLabel.Cursor := crHand;
  URLLabel.OnClick := @URLLabelOnClick;
  URLLabel.Parent := ParentForm;
  { Alter Font *after* setting Parent so the correct defaults are inherited first }
  URLLabel.Font.Style := URLLabel.Font.Style + [fsUnderline];
  if GetWindowsVersion >= $040A0000 then   { Windows 98 or later? }
    URLLabel.Font.Color := clHotLight
  else
    URLLabel.Font.Color := clBlue;
  URLLabel.Top := AboutButton.Top + AboutButton.Height - URLLabel.Height - 2;
  URLLabel.Left := AboutButton.Left + AboutButton.Width + ScaleX(20);
end;

procedure InitializeWizard();
begin
  { Custom domain pages }
  CreateTheDomainPages(wpWelcome);

  { Custom database pages }
  pageList[1] := CreateTheDatabaseConfigPages(pageDomain.ID,'Member_Ack_DT');
  pageList[2] := CreateTheDatabaseConfigPages(pageList[1].ID,'Cashless_Ack_DT');
  pageList[3] := CreateTheDatabaseConfigPages(pageList[2].ID,'Ticketing_Ack_DT');
  pageList[4] := CreateTheDatabaseConfigPages(pageList[3].ID,'Jackpot_Ack_DT');
  pageList[5] := CreateTheDatabaseConfigPages(pageList[4].ID,'Accounting_Ack_DT');

  { Custom controls }
  CreateAboutButtonAndURLLabel(WizardForm, WizardForm.CancelButton);
end;

procedure InitializeUninstallProgressForm();
begin
  { Custom controls }
  CreateAboutButtonAndURLLabel(UninstallProgressForm, UninstallProgressForm.CancelButton);
end;
